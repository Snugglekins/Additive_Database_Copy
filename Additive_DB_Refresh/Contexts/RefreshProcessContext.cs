// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Additive_DB_Refresh.Models;
using Microsoft.EntityFrameworkCore;

namespace Additive_DB_Refresh.Contexts;

public partial class RefreshProcessContext : DbContext
{
    public RefreshProcessContext(DbContextOptions<RefreshProcessContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AddressType> AddressTypes { get; set; }

    public virtual DbSet<ApiUser> ApiUsers { get; set; }

    public virtual DbSet<ApplicationObject> ApplicationObjects { get; set; }

    public virtual DbSet<ApplicationObjectType> ApplicationObjectTypes { get; set; }

    public virtual DbSet<AppointmentType> AppointmentTypes { get; set; }

    public virtual DbSet<BookingAgent> BookingAgents { get; set; }

    public virtual DbSet<BookingAgentBilling> BookingAgentBillings { get; set; }

    public virtual DbSet<BookingAgentCardOnFileRequest> BookingAgentCardOnFileRequests { get; set; }

    public virtual DbSet<BookingAgentCardsOnFile> BookingAgentCardsOnFiles { get; set; }

    public virtual DbSet<BookingAgentCommission> BookingAgentCommissions { get; set; }

    public virtual DbSet<BookingAgentCrossSellEvent> BookingAgentCrossSellEvents { get; set; }

    public virtual DbSet<BookingAgentEntityHierarchy> BookingAgentEntityHierarchies { get; set; }

    public virtual DbSet<BookingAgentEntityHierarchyOption> BookingAgentEntityHierarchyOptions { get; set; }

    public virtual DbSet<BookingAgentEntityHierarchyOptionTime> BookingAgentEntityHierarchyOptionTimes { get; set; }

    public virtual DbSet<BookingAgentEntityHierarchyRate> BookingAgentEntityHierarchyRates { get; set; }

    public virtual DbSet<BookingAgentPackage> BookingAgentPackages { get; set; }

    public virtual DbSet<BookingAgentTime> BookingAgentTimes { get; set; }

    public virtual DbSet<BookingAgentType> BookingAgentTypes { get; set; }

    public virtual DbSet<BookingClientAgentMapping> BookingClientAgentMappings { get; set; }

    public virtual DbSet<Camera> Cameras { get; set; }

    public virtual DbSet<CapacityType> CapacityTypes { get; set; }

    public virtual DbSet<CardType> CardTypes { get; set; }

    public virtual DbSet<CashDrawer_EventType> CashDrawer_EventTypes { get; set; }

    public virtual DbSet<CashDrawer_Session> CashDrawer_Sessions { get; set; }

    public virtual DbSet<Client> Clients { get; set; }

    public virtual DbSet<ClientAgent> ClientAgents { get; set; }

    public virtual DbSet<ClientEmployee> ClientEmployees { get; set; }

    public virtual DbSet<ClientLocation> ClientLocations { get; set; }

    public virtual DbSet<ClientLocationAddOn> ClientLocationAddOns { get; set; }

    public virtual DbSet<ClientLocationAddOnsEntityHierarchy> ClientLocationAddOnsEntityHierarchies { get; set; }

    public virtual DbSet<ClientLocationAddress> ClientLocationAddresses { get; set; }

    public virtual DbSet<ClientLocationConversionTracking> ClientLocationConversionTrackings { get; set; }

    public virtual DbSet<ClientLocationCustomField> ClientLocationCustomFields { get; set; }

    public virtual DbSet<ClientLocationCustomFieldResponse> ClientLocationCustomFieldResponses { get; set; }

    public virtual DbSet<ClientLocationCustomForm> ClientLocationCustomForms { get; set; }

    public virtual DbSet<ClientLocationCustomFormAssociation> ClientLocationCustomFormAssociations { get; set; }

    public virtual DbSet<ClientLocationDaysOfTheWeek> ClientLocationDaysOfTheWeeks { get; set; }

    public virtual DbSet<ClientLocationDevice> ClientLocationDevices { get; set; }

    public virtual DbSet<ClientLocationDiscount> ClientLocationDiscounts { get; set; }

    public virtual DbSet<ClientLocationDiscountMultiplePromoCode> ClientLocationDiscountMultiplePromoCodes { get; set; }

    public virtual DbSet<ClientLocationDiscountTime> ClientLocationDiscountTimes { get; set; }

    public virtual DbSet<ClientLocationEmailTemplate> ClientLocationEmailTemplates { get; set; }

    public virtual DbSet<ClientLocationEntity> ClientLocationEntities { get; set; }

    public virtual DbSet<ClientLocationEntityHierarchyDiscount> ClientLocationEntityHierarchyDiscounts { get; set; }

    public virtual DbSet<ClientLocationEntityHierarchyDiscountRate> ClientLocationEntityHierarchyDiscountRates { get; set; }

    public virtual DbSet<ClientLocationEntityPickupRoute> ClientLocationEntityPickupRoutes { get; set; }

    public virtual DbSet<ClientLocationEntitySchedule> ClientLocationEntitySchedules { get; set; }

    public virtual DbSet<ClientLocationEntityScheduleBookingAgent> ClientLocationEntityScheduleBookingAgents { get; set; }

    public virtual DbSet<ClientLocationEntityScheduleBookingAgentRate> ClientLocationEntityScheduleBookingAgentRates { get; set; }

    public virtual DbSet<ClientLocationEntityScheduleHour> ClientLocationEntityScheduleHours { get; set; }

    public virtual DbSet<ClientLocationEntityScheduleRate> ClientLocationEntityScheduleRates { get; set; }

    public virtual DbSet<ClientLocationEntityScheduleResource> ClientLocationEntityScheduleResources { get; set; }

    public virtual DbSet<ClientLocationHeardAboutU> ClientLocationHeardAboutUs { get; set; }

    public virtual DbSet<ClientLocationItemDirectory> ClientLocationItemDirectories { get; set; }

    public virtual DbSet<ClientLocationLanguage> ClientLocationLanguages { get; set; }

    public virtual DbSet<ClientLocationLogin> ClientLocationLogins { get; set; }

    public virtual DbSet<ClientLocationLoginRole> ClientLocationLoginRoles { get; set; }

    public virtual DbSet<ClientLocationOtherPaymentType> ClientLocationOtherPaymentTypes { get; set; }

    public virtual DbSet<ClientLocationPaymentReason> ClientLocationPaymentReasons { get; set; }

    public virtual DbSet<ClientLocationProcessingFee> ClientLocationProcessingFees { get; set; }

    public virtual DbSet<ClientLocationProcessingFeeHistory> ClientLocationProcessingFeeHistories { get; set; }

    public virtual DbSet<ClientLocationProductDiscount> ClientLocationProductDiscounts { get; set; }

    public virtual DbSet<ClientLocationRefundReason> ClientLocationRefundReasons { get; set; }

    public virtual DbSet<ClientLocationResource> ClientLocationResources { get; set; }

    public virtual DbSet<ClientLocationResourceItem> ClientLocationResourceItems { get; set; }

    public virtual DbSet<ClientLocationRole> ClientLocationRoles { get; set; }

    public virtual DbSet<ClientLocationRoleApplicationObject> ClientLocationRoleApplicationObjects { get; set; }

    public virtual DbSet<ClientLocationRolesEntityHierarchy> ClientLocationRolesEntityHierarchies { get; set; }

    public virtual DbSet<ClientLocationScheduleDayBookingAgent> ClientLocationScheduleDayBookingAgents { get; set; }

    public virtual DbSet<ClientLocationScheduleDayBookingAgentRate> ClientLocationScheduleDayBookingAgentRates { get; set; }

    public virtual DbSet<ClientLocationScheduleDaysEnum> ClientLocationScheduleDaysEnums { get; set; }

    public virtual DbSet<ClientLocationScheduleLimitation> ClientLocationScheduleLimitations { get; set; }

    public virtual DbSet<ClientLocationScheduleTime> ClientLocationScheduleTimes { get; set; }

    public virtual DbSet<ClientLocationScheduleTimeBookingAgent> ClientLocationScheduleTimeBookingAgents { get; set; }

    public virtual DbSet<ClientLocationScheduleTimeDay> ClientLocationScheduleTimeDays { get; set; }

    public virtual DbSet<ClientLocationScheduleTimeDayBookingAgent> ClientLocationScheduleTimeDayBookingAgents { get; set; }

    public virtual DbSet<ClientLocationScheduleTimeDayBookingAgentRate> ClientLocationScheduleTimeDayBookingAgentRates { get; set; }

    public virtual DbSet<ClientLocationScheduleTimeDayBookingAgentRateEnum> ClientLocationScheduleTimeDayBookingAgentRateEnums { get; set; }

    public virtual DbSet<ClientLocationScheduleTimeDayNote> ClientLocationScheduleTimeDayNotes { get; set; }

    public virtual DbSet<ClientLocationScheduleTimeDayOption> ClientLocationScheduleTimeDayOptions { get; set; }

    public virtual DbSet<ClientLocationScheduleTimeDayOptionRate> ClientLocationScheduleTimeDayOptionRates { get; set; }

    public virtual DbSet<ClientLocationScheduleTimeDayPickupRoute> ClientLocationScheduleTimeDayPickupRoutes { get; set; }

    public virtual DbSet<ClientLocationScheduleTimeDayRate> ClientLocationScheduleTimeDayRates { get; set; }

    public virtual DbSet<ClientLocationScheduleTimeDayRateResource> ClientLocationScheduleTimeDayRateResources { get; set; }

    public virtual DbSet<ClientLocationScheduleTimeDayResource> ClientLocationScheduleTimeDayResources { get; set; }

    public virtual DbSet<ClientLocationScheduleWhen> ClientLocationScheduleWhens { get; set; }

    public virtual DbSet<ClientLocationTranslation> ClientLocationTranslations { get; set; }

    public virtual DbSet<ClientLocationTransportation> ClientLocationTransportations { get; set; }

    public virtual DbSet<ClientLocationWeather> ClientLocationWeathers { get; set; }

    public virtual DbSet<ClientLogin> ClientLogins { get; set; }

    public virtual DbSet<ClientMerchandise> ClientMerchandises { get; set; }

    public virtual DbSet<ClientPaymentGateway> ClientPaymentGateways { get; set; }

    public virtual DbSet<ClientRefundReason> ClientRefundReasons { get; set; }

    public virtual DbSet<CommissionType> CommissionTypes { get; set; }

    public virtual DbSet<ConsentForm> ConsentForms { get; set; }

    public virtual DbSet<ConsentFormHeading> ConsentFormHeadings { get; set; }

    public virtual DbSet<ConsentFormQuestion> ConsentFormQuestions { get; set; }

    public virtual DbSet<ConsentQuestion> ConsentQuestions { get; set; }

    public virtual DbSet<ConsentQuestionLanguage> ConsentQuestionLanguages { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<CrossSellEventType> CrossSellEventTypes { get; set; }

    public virtual DbSet<DIN_ExperienceLevel> DIN_ExperienceLevels { get; set; }

    public virtual DbSet<DIN_Height> DIN_Heights { get; set; }

    public virtual DbSet<DIN_ShoeSize> DIN_ShoeSizes { get; set; }

    public virtual DbSet<DIN_Weight> DIN_Weights { get; set; }

    public virtual DbSet<Date> Dates { get; set; }

    public virtual DbSet<DaylightSavingTimeWindow> DaylightSavingTimeWindows { get; set; }

    public virtual DbSet<DaysOfTheWeek> DaysOfTheWeeks { get; set; }

    public virtual DbSet<DeviceParing> DeviceParings { get; set; }

    public virtual DbSet<DeviceType> DeviceTypes { get; set; }

    public virtual DbSet<DigitalWallet> DigitalWallets { get; set; }

    public virtual DbSet<DirectionType> DirectionTypes { get; set; }

    public virtual DbSet<DiscountApplicationType> DiscountApplicationTypes { get; set; }

    public virtual DbSet<DiscountType> DiscountTypes { get; set; }

    public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }

    public virtual DbSet<EmailTemplateSection> EmailTemplateSections { get; set; }

    public virtual DbSet<EntityHierarchy> EntityHierarchies { get; set; }

    public virtual DbSet<EntityHierarchyChangeWindow> EntityHierarchyChangeWindows { get; set; }

    public virtual DbSet<EntityHierarchyEmployee> EntityHierarchyEmployees { get; set; }

    public virtual DbSet<EntityHierarchyInventory> EntityHierarchyInventories { get; set; }

    public virtual DbSet<EntityHierarchyOption> EntityHierarchyOptions { get; set; }

    public virtual DbSet<EntityHierarchyOptionRate> EntityHierarchyOptionRates { get; set; }

    public virtual DbSet<EntityHierarchyRate> EntityHierarchyRates { get; set; }

    public virtual DbSet<EntityHierarchyRateResource> EntityHierarchyRateResources { get; set; }

    public virtual DbSet<EntityHierarchyTranslation> EntityHierarchyTranslations { get; set; }

    public virtual DbSet<EntryMode> EntryModes { get; set; }

    public virtual DbSet<EventType> EventTypes { get; set; }

    public virtual DbSet<ExplicitDay> ExplicitDays { get; set; }

    public virtual DbSet<Fee> Fees { get; set; }

    public virtual DbSet<FeeAssociation> FeeAssociations { get; set; }

    public virtual DbSet<FeeClass> FeeClasses { get; set; }

    public virtual DbSet<FeeType> FeeTypes { get; set; }

    public virtual DbSet<Gender> Genders { get; set; }

    public virtual DbSet<GiftCard> GiftCards { get; set; }

    public virtual DbSet<History_BookingAgentCardsOnFile> History_BookingAgentCardsOnFiles { get; set; }

    public virtual DbSet<History_BookingAgentEntityHierarchyRate> History_BookingAgentEntityHierarchyRates { get; set; }

    public virtual DbSet<History_BookingAgentInvoice> History_BookingAgentInvoices { get; set; }

    public virtual DbSet<History_ClientLocationCustomField> History_ClientLocationCustomFields { get; set; }

    public virtual DbSet<History_ClientLocationCustomFieldResponse> History_ClientLocationCustomFieldResponses { get; set; }

    public virtual DbSet<History_ClientLocationEntityHierarchyDiscount> History_ClientLocationEntityHierarchyDiscounts { get; set; }

    public virtual DbSet<History_ClientLocationEntityHierarchyDiscountRate> History_ClientLocationEntityHierarchyDiscountRates { get; set; }

    public virtual DbSet<History_ClientLocationEntityScheduleRate> History_ClientLocationEntityScheduleRates { get; set; }

    public virtual DbSet<History_ClientLocationProductDiscount> History_ClientLocationProductDiscounts { get; set; }

    public virtual DbSet<History_DIN_ExperienceLevel> History_DIN_ExperienceLevels { get; set; }

    public virtual DbSet<History_DIN_Height> History_DIN_Heights { get; set; }

    public virtual DbSet<History_DIN_ShoeSize> History_DIN_ShoeSizes { get; set; }

    public virtual DbSet<History_DIN_Weight> History_DIN_Weights { get; set; }

    public virtual DbSet<History_EntityHierarchyRate> History_EntityHierarchyRates { get; set; }

    public virtual DbSet<History_Product> History_Products { get; set; }

    public virtual DbSet<History_ProductVariablePrice> History_ProductVariablePrices { get; set; }

    public virtual DbSet<HolidayRule> HolidayRules { get; set; }

    public virtual DbSet<ImportSource> ImportSources { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<Merchandise_Inventory> Merchandise_Inventories { get; set; }

    public virtual DbSet<Merchandise_InventoryChangeLog> Merchandise_InventoryChangeLogs { get; set; }

    public virtual DbSet<Merchandise_Product> Merchandise_Products { get; set; }

    public virtual DbSet<Merchandise_ProductAddOnEntityHierarchy> Merchandise_ProductAddOnEntityHierarchies { get; set; }

    public virtual DbSet<Merchandise_ProductCategory> Merchandise_ProductCategories { get; set; }

    public virtual DbSet<Merchandise_ProductCategoryAssociation> Merchandise_ProductCategoryAssociations { get; set; }

    public virtual DbSet<Merchandise_ProductColor> Merchandise_ProductColors { get; set; }

    public virtual DbSet<Merchandise_ProductFlavor> Merchandise_ProductFlavors { get; set; }

    public virtual DbSet<Merchandise_ProductRentalItem> Merchandise_ProductRentalItems { get; set; }

    public virtual DbSet<Merchandise_ProductRentalItemNote> Merchandise_ProductRentalItemNotes { get; set; }

    public virtual DbSet<Merchandise_ProductSize> Merchandise_ProductSizes { get; set; }

    public virtual DbSet<Merchandise_ProductVariablePrice> Merchandise_ProductVariablePrices { get; set; }

    public virtual DbSet<Merchandise_RentalNoteType> Merchandise_RentalNoteTypes { get; set; }

    public virtual DbSet<MessageTemplate> MessageTemplates { get; set; }

    public virtual DbSet<MessageTemplateType> MessageTemplateTypes { get; set; }

    public virtual DbSet<NotificationSystem_NotificationDeliveryType> NotificationSystem_NotificationDeliveryTypes { get; set; }

    public virtual DbSet<NotificationSystem_NotificationType> NotificationSystem_NotificationTypes { get; set; }

    public virtual DbSet<OnlineTravelAgency> OnlineTravelAgencies { get; set; }

    public virtual DbSet<OpeningTrigger> OpeningTriggers { get; set; }

    public virtual DbSet<OrderStatus> OrderStatuses { get; set; }

    public virtual DbSet<OrganizationType> OrganizationTypes { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<PackageDetail> PackageDetails { get; set; }

    public virtual DbSet<PackageDetailGroup> PackageDetailGroups { get; set; }

    public virtual DbSet<PackageDetailRate> PackageDetailRates { get; set; }

    public virtual DbSet<PackageGroup> PackageGroups { get; set; }

    public virtual DbSet<PackageType> PackageTypes { get; set; }

    public virtual DbSet<PaymentGateway> PaymentGateways { get; set; }

    public virtual DbSet<PaymentMethodType> PaymentMethodTypes { get; set; }

    public virtual DbSet<PaymentProcessor> PaymentProcessors { get; set; }

    public virtual DbSet<PaymentType> PaymentTypes { get; set; }

    public virtual DbSet<PhoneType> PhoneTypes { get; set; }

    public virtual DbSet<PhotoPackage> PhotoPackages { get; set; }

    public virtual DbSet<PhotoPackageType> PhotoPackageTypes { get; set; }

    public virtual DbSet<PhotoSystemType> PhotoSystemTypes { get; set; }

    public virtual DbSet<PickupLocation> PickupLocations { get; set; }

    public virtual DbSet<PickupOrderEventType> PickupOrderEventTypes { get; set; }

    public virtual DbSet<PickupRoute> PickupRoutes { get; set; }

    public virtual DbSet<PickupRouteDay> PickupRouteDays { get; set; }

    public virtual DbSet<PickupRouteEmployee> PickupRouteEmployees { get; set; }

    public virtual DbSet<PickupRouteSchedule> PickupRouteSchedules { get; set; }

    public virtual DbSet<PickupRouteScheduleTime> PickupRouteScheduleTimes { get; set; }

    public virtual DbSet<PickupRouteScheduleTimeDay> PickupRouteScheduleTimeDays { get; set; }

    public virtual DbSet<PickupRouteStop> PickupRouteStops { get; set; }

    public virtual DbSet<PickupRouteStopDay> PickupRouteStopDays { get; set; }

    public virtual DbSet<PickupRouteVehicle> PickupRouteVehicles { get; set; }

    public virtual DbSet<PickupStatus> PickupStatuses { get; set; }

    public virtual DbSet<PickupVehicle> PickupVehicles { get; set; }

    public virtual DbSet<ProcessingType> ProcessingTypes { get; set; }

    public virtual DbSet<RateClass> RateClasses { get; set; }

    public virtual DbSet<RefundMethodType> RefundMethodTypes { get; set; }

    public virtual DbSet<RefundType> RefundTypes { get; set; }

    public virtual DbSet<Register> Registers { get; set; }

    public virtual DbSet<ResponseType> ResponseTypes { get; set; }

    public virtual DbSet<ScheduleType> ScheduleTypes { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<ServiceLog> ServiceLogs { get; set; }

    public virtual DbSet<Session> Sessions { get; set; }

    public virtual DbSet<Square_CardBrandEnum> Square_CardBrandEnums { get; set; }

    public virtual DbSet<Square_CurrencyCode> Square_CurrencyCodes { get; set; }

    public virtual DbSet<Square_EntryMethodEnum> Square_EntryMethodEnums { get; set; }

    public virtual DbSet<Square_SquareSDKType> Square_SquareSDKTypes { get; set; }

    public virtual DbSet<Square_StatusEnum> Square_StatusEnums { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<SystemConfiguration> SystemConfigurations { get; set; }

    public virtual DbSet<SystemEntityType> SystemEntityTypes { get; set; }

    public virtual DbSet<System_AppVersion> System_AppVersions { get; set; }

    public virtual DbSet<System_ApplicationRole> System_ApplicationRoles { get; set; }

    public virtual DbSet<System_ApplicationRolesApplicationObject> System_ApplicationRolesApplicationObjects { get; set; }

    public virtual DbSet<System_Color> System_Colors { get; set; }

    public virtual DbSet<System_EmailType> System_EmailTypes { get; set; }

    public virtual DbSet<System_MessageType> System_MessageTypes { get; set; }

    public virtual DbSet<System_OrderStatusEnum> System_OrderStatusEnums { get; set; }

    public virtual DbSet<System_ProcessingStatus> System_ProcessingStatuses { get; set; }

    public virtual DbSet<System_TimeZone> System_TimeZones { get; set; }

    public virtual DbSet<System_ZCTum> System_ZCTAs { get; set; }

    public virtual DbSet<System_spt_value> System_spt_values { get; set; }

    public virtual DbSet<Ticketing_TicketType> Ticketing_TicketTypes { get; set; }

    public virtual DbSet<TransactionType> TransactionTypes { get; set; }

    public virtual DbSet<avail_ScheduleDay> avail_ScheduleDays { get; set; }

    public virtual DbSet<avail_ScheduleRate> avail_ScheduleRates { get; set; }

    public virtual DbSet<avail_ScheduleRateResource> avail_ScheduleRateResources { get; set; }

    public virtual DbSet<avail_ScheduleTime> avail_ScheduleTimes { get; set; }

    public virtual DbSet<avail_ScheduleTimeResource> avail_ScheduleTimeResources { get; set; }

    public virtual DbSet<remediate_MessageQueueFixerConfiguration> remediate_MessageQueueFixerConfigurations { get; set; }

    public virtual DbSet<remediate_ProcessOrderResultType> remediate_ProcessOrderResultTypes { get; set; }

    public virtual DbSet<remediate_ProcessedOrder> remediate_ProcessedOrders { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ApiUser>(entity =>
        {
            entity.Property(e => e.ApiKey).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ApiUserKey).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.ClientKeyNavigation).WithMany()
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ApiUsers_Clients");
        });

        modelBuilder.Entity<ApplicationObject>(entity =>
        {
            entity.HasKey(e => e.ApplicationObjectKey).IsClustered(false);

            entity.HasOne(d => d.ApplicationObjectTypeKeyNavigation).WithMany(p => p.ApplicationObjects)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ApplicationObjects_ApplicationObjectTypes");
        });

        modelBuilder.Entity<AppointmentType>(entity =>
        {
            entity.HasKey(e => e.AppointmentTypeKey).HasName("pk_AppointmentTypes");
        });

        modelBuilder.Entity<BookingAgent>(entity =>
        {
            entity.HasKey(e => e.BookingAgentKey).HasFillFactor(80);

            entity.HasIndex(e => e.PartnerClientLocationKey, "ix_BookingAgents_Partner_ClientLocationKey").HasFilter("([Partner_ClientLocationKey] IS NOT NULL AND [IsActive]=(1) AND [DateDeleted] IS NULL)");

            entity.Property(e => e.ApiKey).HasComment("Online Travel Agency Api Key");
            entity.Property(e => e.BookingAgentTypeKey).HasDefaultValue((byte)1);
            entity.Property(e => e.NextInvoiceNumber).HasDefaultValue(1);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.StartingInvoiceNumber).HasDefaultValue(1);

            entity.HasOne(d => d.BookingAgentTypeKeyNavigation).WithMany(p => p.BookingAgents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgents_BookingAgentTypeKey");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.BookingAgentClientLocationKeyNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingAgents_ClientLocations");

            entity.HasOne(d => d.CommissionTypeKeyNavigation).WithMany(p => p.BookingAgents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookAgents_CommissionTypeKey");

            entity.HasOne(d => d.OnlineTravelAgencyKeyNavigation).WithMany(p => p.BookingAgents).HasConstraintName("FK_BookingAgents_OnlineTravelAgencies");

            entity.HasOne(d => d.PartnerClientLocationKeyNavigation).WithMany(p => p.BookingAgentPartnerClientLocationKeyNavigations).HasConstraintName("fk_BookingAgents_Partner_ClientLocationKey");
        });

        modelBuilder.Entity<BookingAgentBilling>(entity =>
        {
            entity.HasKey(e => e.BookingAgentBillingKey).HasName("PK_BookingAgentAddresses");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.BookingAgentCardOnFileHistoryKeyNavigation).WithMany(p => p.BookingAgentBillings).HasConstraintName("fk_BookingAgentBilling_BookingAgentCardOnFileHistoryKey");

            entity.HasOne(d => d.BookingAgentCardOnFileKeyNavigation).WithMany(p => p.BookingAgentBillings).HasConstraintName("fk_BookingAgentBilling_BookingAgentCardOnFileKey");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.BookingAgentBillings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingAgentBilling_BookingAgents");
        });

        modelBuilder.Entity<BookingAgentCardOnFileRequest>(entity =>
        {
            entity.Property(e => e.Nonce).IsFixedLength();
            entity.Property(e => e.ExpiresAt).HasDefaultValueSql("(dateadd(hour,(72),sysutcdatetime()))");
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.AffiliateApprovalClientLoginKeyNavigation).WithMany(p => p.BookingAgentCardOnFileRequests)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingAgentCardOnFileRequests_AffiliateApprovalClientLoginKey");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.BookingAgentCardOnFileRequests)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingAgentCardOnFileRequests_BookingAgents");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.BookingAgentCardOnFileRequests)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingAgentCardOnFileRequests_ClientLocations");
        });

        modelBuilder.Entity<BookingAgentCardsOnFile>(entity =>
        {
            entity.HasKey(e => e.BookingAgentCardOnFileKey).HasName("pk_BookingAgentCardsOnFile");

            entity.ToTable("BookingAgentCardsOnFile", tb =>
                {
                    tb.HasTrigger("trd_BookingAgentCardsOnFile");
                    tb.HasTrigger("trui_BookingAgentCardsOnFile");
                });

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.AffiliateApprovalClientLoginKeyNavigation).WithMany(p => p.BookingAgentCardsOnFiles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentCardsOnFile_AffiliateApprovalClientLoginKey");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.BookingAgentCardsOnFiles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentCardsOnFile_BookingAgentKey");

            entity.HasOne(d => d.CardTypeKeyNavigation).WithMany(p => p.BookingAgentCardsOnFiles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentCardsOnFile_CardTypeKey");
        });

        modelBuilder.Entity<BookingAgentCommission>(entity =>
        {
            entity.HasKey(e => e.BookingAgentCommissionKey).IsClustered(false);

            entity.ToTable(tb => tb.HasTrigger("ti_BookingAgentCommissions"));

            entity.Property(e => e.BookingAgentCommissionKey).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AdultsValue).HasDefaultValue(0m);
            entity.Property(e => e.ChildrenValue).HasDefaultValue(0m);
            entity.Property(e => e.CommissionPercent).HasDefaultValue(0m);
            entity.Property(e => e.EndDate).HasDefaultValue(new DateOnly(9999, 12, 31));
            entity.Property(e => e.OldCommissionTypeKey).IsFixedLength();
            entity.Property(e => e.StartDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.BookingAgentCommissions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingAgentCommissions_BookingAgents");

            entity.HasOne(d => d.CommissionTypeKeyNavigation).WithMany(p => p.BookingAgentCommissions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentCommissions_CommissionTypeKey");
        });

        modelBuilder.Entity<BookingAgentCrossSellEvent>(entity =>
        {
            entity.HasKey(e => e.BookingAgentCrossSellEventKey).HasName("pk_BookingAgentCrossSellEvents");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.BookingAgentCrossSellEvents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentCrossSellEvents_BookingAgentKey");

            entity.HasOne(d => d.CrossSellEventTypeKeyNavigation).WithMany(p => p.BookingAgentCrossSellEvents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentCrossSellEvents_CrossSellEventTypeKey");

            entity.HasOne(d => d.SupplierClientLocationKeyNavigation).WithMany(p => p.BookingAgentCrossSellEvents).HasConstraintName("fk_BookingAgentCrossSellEvents_ClientLocationKey");
        });

        modelBuilder.Entity<BookingAgentEntityHierarchy>(entity =>
        {
            entity.HasKey(e => e.BookingAgentEntityHierarchyKey).HasName("PK_BookingAgentEntityHierarchies");

            entity.HasIndex(e => new { e.BookingAgentKey, e.BookingAgentEntityHierarchyKey }, "idx_BookingAgentEntityHierarchy_Covering")
                .IsUnique()
                .HasFilter("([DateDeleted] IS NULL)");

            entity.Property(e => e.DateAdded).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ShowInPackageOnly).HasDefaultValue(true);
            entity.Property(e => e.SortOrder).HasDefaultValue((short)32767);
            entity.Property(e => e.UseDynamicPricing).HasDefaultValue(true);

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.BookingAgentEntityHierarchies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingAgentEntityHierarchies_BookingAgents");

            entity.HasOne(d => d.BookingAgentPackageKeyNavigation).WithMany(p => p.BookingAgentEntityHierarchies).HasConstraintName("fk_BookingAgentEntityHierarchy_BookingAgentPackageKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.BookingAgentEntityHierarchies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingAgentEntityHierarchies_EntityHierarchies");

            entity.HasOne(d => d.OnlineTravelAgencyKeyNavigation).WithMany(p => p.BookingAgentEntityHierarchies).HasConstraintName("FK_BookingAgentEntityHierarchies_OnlineTravelAgencies");
        });

        modelBuilder.Entity<BookingAgentEntityHierarchyOption>(entity =>
        {
            entity.HasKey(e => e.BookingAgentEntityHierarchyOptionKey).HasName("pk_BookingAgentEntityHierarchyOptions");

            entity.HasOne(d => d.BookingAgentEntityHierarchyKeyNavigation).WithMany(p => p.BookingAgentEntityHierarchyOptions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentEntityHierarchyOptions_BookingAgentEntityHierarchyKey");

            entity.HasOne(d => d.EntityHierarchyOptionKeyNavigation).WithMany(p => p.BookingAgentEntityHierarchyOptions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentEntityHierarchyOptions_EntityHierarchyOptionKey");
        });

        modelBuilder.Entity<BookingAgentEntityHierarchyOptionTime>(entity =>
        {
            entity.HasKey(e => e.BookingAgentEntityHierarchyOptionTimeKey).HasName("PK_BookingAgentEntityHierarchyOptionTimes_BookingAgentEntityHierarchyOptionTimeKey");

            entity.HasIndex(e => e.OptionTime, "IDXF_BookingAgentEntityHeirarchyOptionTimes").HasFilter("([DateDeleted] IS NULL)");

            entity.HasIndex(e => new { e.BookingAgentEntityHierarchyOptionKey, e.OptionTime }, "IDXUF_BookingAgentEntityHierarchyOptionTimes_OptionKey_OptionTime")
                .IsUnique()
                .HasFilter("([DateDeleted] IS NULL)");

            entity.Property(e => e.DateAdded).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.BookingAgentEntityHierarchyOptionKeyNavigation).WithMany(p => p.BookingAgentEntityHierarchyOptionTimes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingAgentEntityHierarchyOptionTimes_BookingAgentEntityHierarchyOptins");
        });

        modelBuilder.Entity<BookingAgentEntityHierarchyRate>(entity =>
        {
            entity.HasKey(e => e.BookingAgentEntityHierarchyRateKey).HasName("pk_BookingAgentEntityHierarchyRates");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("trd_BookingAgentEntityHierarchyRates");
                    tb.HasTrigger("trui_BookingAgentEntityHierarchyRates");
                });

            entity.Property(e => e.ShowInPackageOnly).HasDefaultValue(true);

            entity.HasOne(d => d.BookingAgentEntityHierarchyKeyNavigation).WithMany(p => p.BookingAgentEntityHierarchyRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentEntityHierarchyRates_BookingAgentEntityHierarchyKey");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.BookingAgentEntityHierarchyRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentEntityHierarchyRates_BookingAgentKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.BookingAgentEntityHierarchyRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentEntityHierarchyRates_EntityHierarchyKey");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.BookingAgentEntityHierarchyRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentEntityHierarchyRates_EntityHierarchyRateKey");
        });

        modelBuilder.Entity<BookingAgentPackage>(entity =>
        {
            entity.HasKey(e => e.BookingAgentPackageKey).HasName("pk_BookingAgentPackages");

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.BookingAgentPackages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentPackages_BookingAgentKey");

            entity.HasOne(d => d.PackageKeyNavigation).WithMany(p => p.BookingAgentPackages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentPackages_PackageKey");
        });

        modelBuilder.Entity<BookingAgentTime>(entity =>
        {
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.BookingAgentTimes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_BookingAgentTimes_BookingAgentKey");
        });

        modelBuilder.Entity<BookingAgentType>(entity =>
        {
            entity.HasKey(e => e.BookingAgentTypeKey).HasName("pk_BookingAgentTypes");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<BookingClientAgentMapping>(entity =>
        {
            entity.HasIndex(e => new { e.ClientAgentKey, e.BookingAgentKey }, "UK_BookingClientAgentMapping")
                .IsUnique()
                .IsClustered();
        });

        modelBuilder.Entity<Camera>(entity =>
        {
            entity.HasOne(d => d.ClientLocationEntityKeyNavigation).WithMany(p => p.Cameras)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cameras_ClientLocationEntities");
        });

        modelBuilder.Entity<CapacityType>(entity =>
        {
            entity.HasKey(e => e.CapacityTypeKey).HasName("pk_CapacityTypes");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<CardType>(entity =>
        {
            entity.Property(e => e.CardTypeKey).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<CashDrawer_EventType>(entity =>
        {
            entity.HasKey(e => e.EventTypeKey).HasName("PK_CashDrawer.EventTypes");

            entity.Property(e => e.EventTypeKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<CashDrawer_Session>(entity =>
        {
            entity.HasKey(e => e.SessionKey)
                .HasName("PK_CashDrawer.Sessions")
                .IsClustered(false)
                .HasFillFactor(80);

            entity.Property(e => e.SessionKey).ValueGeneratedNever();

            entity.HasOne(d => d.RegisterKeyNavigation).WithMany(p => p.CashDrawer_Sessions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sessions_Registers");
        });

        modelBuilder.Entity<ClientAgent>(entity =>
        {
            entity.HasOne(d => d.AgentClientKeyNavigation).WithMany(p => p.ClientAgentAgentClientKeyNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientAgents_Clients_Agent");

            entity.HasOne(d => d.ClientKeyNavigation).WithMany(p => p.ClientAgentClientKeyNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientAgents_Clients_Client");
        });

        modelBuilder.Entity<ClientEmployee>(entity =>
        {
            entity.HasKey(e => e.ClientEmployeeKey)
                .HasName("PK_Employees")
                .HasFillFactor(80);

            entity.HasIndex(e => e.ClientLoginKey, "ix1ClientEmployee").HasFillFactor(80);

            entity.HasOne(d => d.ClientKeyNavigation).WithMany(p => p.ClientEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientEmployees_Clients");

            entity.HasOne(d => d.ClientLoginKeyNavigation).WithMany(p => p.ClientEmployees).HasConstraintName("FK_ClientEmployees_ClientLogin");
        });

        modelBuilder.Entity<ClientLocation>(entity =>
        {
            entity.Property(e => e.AdultAge).HasDefaultValue((byte)18);
            entity.Property(e => e.BookLogoTypeKey).HasDefaultValue((byte)1);
            entity.Property(e => e.ConsentRequiresSignature).HasDefaultValue(true);
            entity.Property(e => e.CountryKey).HasDefaultValue(196);
            entity.Property(e => e.FeesCollectedRealtime).HasDefaultValue(true);
            entity.Property(e => e.GiftCardLogoTypeKey).HasDefaultValue((byte)1);
            entity.Property(e => e.SquareCurrencyCode).HasDefaultValue((byte)151);
            entity.Property(e => e.SquareSdktypeKey).HasDefaultValue((byte)1);

            entity.HasOne(d => d.ClientKeyNavigation).WithMany(p => p.ClientLocations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocations_ClientKey");
        });

        modelBuilder.Entity<ClientLocationAddOn>(entity =>
        {
            entity.HasKey(e => e.ClientLocationAddOnKey).HasName("PK_ClientLocationAddOn");

            entity.Property(e => e.ClientLocationAddOnKey).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationAddOns)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationAddOns_ClientLocations");

            entity.HasOne(d => d.ProductKeyNavigation).WithMany(p => p.ClientLocationAddOns).HasConstraintName("FK_ClientLocationAddOns_Products");
        });

        modelBuilder.Entity<ClientLocationAddOnsEntityHierarchy>(entity =>
        {
            entity.HasKey(e => e.ClientLocationAddOnsEntityHierarchyKey).IsClustered(false);

            entity.Property(e => e.ClientLocationAddOnsEntityHierarchyKey).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.ClientLocationAddOnsEntityHierarchies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationAddOnsEntityHierarchy_EntityHierarchy");
        });

        modelBuilder.Entity<ClientLocationAddress>(entity =>
        {
            entity.HasKey(e => e.ClientLocationAddressKey).IsClustered(false);

            entity.Property(e => e.ClientLocationAddressKey).ValueGeneratedNever();

            entity.HasOne(d => d.AddressTypeKeyNavigation).WithMany(p => p.ClientLocationAddresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationAddresses_AddressTypes");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationAddresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationAddresses_ClientLocations");
        });

        modelBuilder.Entity<ClientLocationConversionTracking>(entity =>
        {
            entity.Property(e => e.ClientLocationConversionTrackingKey).ValueGeneratedNever();

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationConversionTrackings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationConversionTracking_ClientLocations");
        });

        modelBuilder.Entity<ClientLocationCustomField>(entity =>
        {
            entity.HasKey(e => e.ClientLocationCustomFieldKey).HasName("pk_ClientLocationCustomFields");

            entity.ToTable(tb => tb.HasTrigger("trui_ClientLocationCustomFields"));

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.ShowInConfirmationEmail).HasDefaultValue(true);
            entity.Property(e => e.SortOrder).HasDefaultValue((short)1);

            entity.HasOne(d => d.ClientLocationCustomFormKeyNavigation).WithMany(p => p.ClientLocationCustomFields)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationCustomFields_ClientLocationCustomFormKey");

            entity.HasOne(d => d.ResponseTypeKeyNavigation).WithMany(p => p.ClientLocationCustomFields)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationCustomFields_ResponseTypeKey");
        });

        modelBuilder.Entity<ClientLocationCustomFieldResponse>(entity =>
        {
            entity.HasKey(e => e.ClientLocationCustomFieldResponseKey).HasName("pk_ClientLocationCustomFieldResponses");

            entity.ToTable(tb => tb.HasTrigger("trui_ClientLocationCustomFieldResponses"));

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.SortOrder).HasDefaultValue((short)1);

            entity.HasOne(d => d.ClientLocationCustomFieldKeyNavigation).WithMany(p => p.ClientLocationCustomFieldResponses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationCustomFieldResponses_ClientLocationCustomFieldKey");
        });

        modelBuilder.Entity<ClientLocationCustomForm>(entity =>
        {
            entity.HasKey(e => e.ClientLocationCustomFormKey).HasName("pk_ClientLocationCustomForms");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationCustomForms)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationCustomForms_ClientLocationKey");
        });

        modelBuilder.Entity<ClientLocationCustomFormAssociation>(entity =>
        {
            entity.HasKey(e => e.ClientLocationCustomFormAssociationKey).HasName("pk_ClientLocationCustomFormAssociations");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationCustomFormKeyNavigation).WithMany(p => p.ClientLocationCustomFormAssociations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationCustomFormAssociations_ClientLocationCustomFormKey");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationCustomFormAssociations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationCustomFormAssociations_ClientLocationKey");

            entity.HasOne(d => d.ConsentFormKeyNavigation).WithMany(p => p.ClientLocationCustomFormAssociations).HasConstraintName("fk_ClientLocationCustomFormAssociations_ConsentFormKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.ClientLocationCustomFormAssociations).HasConstraintName("fk_ClientLocationCustomFormAssociations_EntityHierarchyKey");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.ClientLocationCustomFormAssociations).HasConstraintName("fk_ClientLocationCustomFormAssociations_EntityHierarchyRateKey");
        });

        modelBuilder.Entity<ClientLocationDaysOfTheWeek>(entity =>
        {
            entity.HasOne(d => d.ClientLocationEntityKeyNavigation).WithMany(p => p.ClientLocationDaysOfTheWeeks).HasConstraintName("FK_ClientLocationDaysOfTheWeek_ClientLocationEntities");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationDaysOfTheWeeks).HasConstraintName("FK_ClientLocationDaysOfTheWeek_ClientLocations");

            entity.HasOne(d => d.DaysOfTheWeekKeyNavigation).WithMany(p => p.ClientLocationDaysOfTheWeeks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationDaysOfTheWeek_DaysOfTheWeek");
        });

        modelBuilder.Entity<ClientLocationDevice>(entity =>
        {
            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationDevices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationDevices_ClientLocations");

            entity.HasOne(d => d.DeviceTypeKeyNavigation).WithMany(p => p.ClientLocationDevices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationDevices_DeviceTypes");
        });

        modelBuilder.Entity<ClientLocationDiscount>(entity =>
        {
            entity.HasKey(e => e.ClientLocationDiscountKey).HasFillFactor(80);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tiClientLocationDiscounts");
                    tb.HasTrigger("tuClientLocationDiscounts");
                });

            entity.HasIndex(e => new { e.RequiredParing, e.IsActive, e.IsAutoApply, e.CanBeCombined }, "ix1ClientLocationDiscounts").HasFillFactor(80);

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientKeyNavigation).WithMany(p => p.ClientLocationDiscounts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationDiscounts_Clients");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationDiscounts).HasConstraintName("FK_ClientLocationDiscounts_ClientLocations");

            entity.HasOne(d => d.DiscountApplicationTypeKeyNavigation).WithMany(p => p.ClientLocationDiscounts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationDiscounts_DiscountApplicationTypes");

            entity.HasOne(d => d.DiscountTypeKeyNavigation).WithMany(p => p.ClientLocationDiscounts).HasConstraintName("FK_ClientLocationDiscounts_DiscountTypes");
        });

        modelBuilder.Entity<ClientLocationDiscountMultiplePromoCode>(entity =>
        {
            entity.HasIndex(e => new { e.ClientLocationKey, e.MultiplePromoCode }, "ix_ClientLocationDiscountMultiplePromoCodes_ClientLocationKey_MultiplePromoCode")
                .IsUnique()
                .HasFilter("([IsDeleted]=(0))");

            entity.Property(e => e.ClientLocationDiscountMultiplePromoCodeKey).ValueGeneratedOnAdd();
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationDiscountKeyNavigation).WithMany()
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationDiscountMultiplePromoCodes_ClientLocationDiscounts");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany()
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationDiscountMultiplePromoCodes_ClientLocationKey");
        });

        modelBuilder.Entity<ClientLocationDiscountTime>(entity =>
        {
            entity.HasKey(e => e.ClientLocationDiscountTimeKey).HasName("pk_ClientLocationDiscountTimes");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationDiscountKeyNavigation).WithMany(p => p.ClientLocationDiscountTimes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationDiscountTimes_ClientLocationDiscountKey");
        });

        modelBuilder.Entity<ClientLocationEmailTemplate>(entity =>
        {
            entity.HasKey(e => e.ClientLocationEmailTemplateKey).IsClustered(false);

            entity.HasIndex(e => e.ClientLocationEmailTemplateKeyIdentity, "ix1ClientLocationEmailTemplates")
                .IsClustered()
                .HasFillFactor(80);

            entity.Property(e => e.ClientLocationEmailTemplateKey).ValueGeneratedNever();
            entity.Property(e => e.ClientLocationEmailTemplateKeyIdentity).ValueGeneratedOnAdd();

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationEmailTemplates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationEmailTemplates_ClientLocations");

            entity.HasOne(d => d.EmailTypeKeyNavigation).WithMany(p => p.ClientLocationEmailTemplates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationEmailTemplates_System.EmailTypes");
        });

        modelBuilder.Entity<ClientLocationEntity>(entity =>
        {
            entity.HasKey(e => e.ClientLocationEntityKey).HasFillFactor(80);

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationEntities)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationEntities_ClientLocations");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.ClientLocationEntities).HasConstraintName("FK_ClientLocationEntities_EntityHierarchy");
        });

        modelBuilder.Entity<ClientLocationEntityHierarchyDiscount>(entity =>
        {
            entity.ToTable(tb =>
                {
                    tb.HasTrigger("trd_ClientLocationEntityHierarchyDiscounts");
                    tb.HasTrigger("trui_ClientLocationEntityHierarchyDiscounts");
                });

            entity.HasIndex(e => e.ClientLocationDiscountKey, "ix1ClientLocationEntityHierarchyDiscounts").HasFillFactor(80);

            entity.HasOne(d => d.ClientLocationDiscountKeyNavigation).WithMany(p => p.ClientLocationEntityHierarchyDiscounts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationEntityHierarchyDiscounts_ClientLocationDiscounts");

            entity.HasOne(d => d.DiscountTypeKeyNavigation).WithMany(p => p.ClientLocationEntityHierarchyDiscounts).HasConstraintName("FK_ClientLocationEntityHierarchyDiscounts_DiscountTypes");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.ClientLocationEntityHierarchyDiscounts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationEntityHierarchyDiscounts_EntityHierarchy");
        });

        modelBuilder.Entity<ClientLocationEntityHierarchyDiscountRate>(entity =>
        {
            entity.HasKey(e => e.ClientLocationEntityHierarchyDiscountRateKey).HasName("pk_ClientLocationEntityHierarchyDiscountRates");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("trd_ClientLocationEntityHierarchyDiscountRates");
                    tb.HasTrigger("trui_ClientLocationEntityHierarchyDiscountRates");
                });

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationEntityHierarchyDiscountKeyNavigation).WithMany(p => p.ClientLocationEntityHierarchyDiscountRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityHierarchyDiscountRates_ClientLocationEntityHierarchyDiscountKey");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.ClientLocationEntityHierarchyDiscountRateEntityHierarchyRateKeyNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityHierarchyDiscountRates_EntityHierarchyRateKey");

            entity.HasOne(d => d.RequiredEntityHierarchyRateKeyNavigation).WithMany(p => p.ClientLocationEntityHierarchyDiscountRateRequiredEntityHierarchyRateKeyNavigations).HasConstraintName("fk_ClientLocationEntityHierarchyDiscountRates_Required_EntityHierarchyRateKey");
        });

        modelBuilder.Entity<ClientLocationEntityPickupRoute>(entity =>
        {
            entity.HasOne(d => d.ClientLocationEntityKeyNavigation).WithMany(p => p.ClientLocationEntityPickupRoutes).HasConstraintName("FK_ClientLocationEntityPickupRoutes_ClientLocationEntities");

            entity.HasOne(d => d.PickupRouteKeyNavigation).WithMany(p => p.ClientLocationEntityPickupRoutes).HasConstraintName("FK_ClientLocationEntityPickupRoutes_PickupRoutes");
        });

        modelBuilder.Entity<ClientLocationEntitySchedule>(entity =>
        {
            entity.HasKey(e => e.ClientLocationEntityScheduleKey).HasFillFactor(80);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ClientLocationEntitySchedulesChangeLog");
                    tb.HasTrigger("tI_ClientLocationEntitySchedulesChangeLog");
                    tb.HasTrigger("tU_ClientLocationEntitySchedulesChangeLog");
                });

            entity.HasIndex(e => new { e.ClientLocationEntityKey, e.IsDeleted, e.IsScheduleTemplate }, "ix1ClientLocationEntitySchedules").HasFillFactor(80);

            entity.HasIndex(e => new { e.ClientLocationEntityKey, e.ScheduleTypeKey, e.StartDate, e.EndDate }, "ix2ClientLocationEntitySchedules").HasFillFactor(80);

            entity.Property(e => e.MaxAdults).HasDefaultValue((short)0);
            entity.Property(e => e.MaxChildren).HasDefaultValue((short)0);
            entity.Property(e => e.MaxPeople).HasDefaultValue((short)0);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.ClientLocationEntityKeyNavigation).WithMany(p => p.ClientLocationEntitySchedules)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationEntitySchedules_ClientLocationEntities");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationEntitySchedules)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationEntitySchedules_ClientLocations");

            entity.HasOne(d => d.ClientLocationScheduleLimitationKeyNavigation).WithMany(p => p.ClientLocationEntitySchedules).HasConstraintName("fk_ClientLocationEntitySchedules_ClientLocationScheduleLimitationKey");

            entity.HasOne(d => d.ClientLocationScheduleWhenKeyNavigation).WithMany(p => p.ClientLocationEntitySchedules).HasConstraintName("fk_ClientLocationEntitySchedules_ClientLocationScheduleWhenKey");

            entity.HasOne(d => d.ScheduleTypeKeyNavigation).WithMany(p => p.ClientLocationEntitySchedules)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationEntitySchedules_ScheduleTypes");
        });

        modelBuilder.Entity<ClientLocationEntityScheduleBookingAgent>(entity =>
        {
            entity.HasKey(e => new { e.ClientLocationEntityScheduleKey, e.BookingAgentKey }).HasName("pk_ClientLocationEntityScheduleBookingAgents");

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.ClientLocationEntityScheduleBookingAgents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityScheduleBookingAgents_BookingAgentKey");

            entity.HasOne(d => d.ClientLocationEntityScheduleKeyNavigation).WithMany(p => p.ClientLocationEntityScheduleBookingAgents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntitySchedules_ClientLocationEntityScheduleKey");
        });

        modelBuilder.Entity<ClientLocationEntityScheduleBookingAgentRate>(entity =>
        {
            entity.HasKey(e => new { e.ClientLocationEntityScheduleKey, e.BookingAgentKey, e.EntityHierarchyRateKey }).HasName("pk_ClientLocationEntityScheduleBookingAgentRates");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationEntityScheduleBookingAgent).WithMany(p => p.ClientLocationEntityScheduleBookingAgentRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityScheduleBookingAgentRates_ClientLocationEntityScheduleBookingAgents");
        });

        modelBuilder.Entity<ClientLocationEntityScheduleHour>(entity =>
        {
            entity.HasOne(d => d.ClientLocationEntityScheduleKeyNavigation).WithMany(p => p.ClientLocationEntityScheduleHours)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationEntityScheduleHours_ClientLocationEntitySchedules");

            entity.HasOne(d => d.DaysOfTheWeekKeyNavigation).WithMany(p => p.ClientLocationEntityScheduleHours)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationEntityScheduleHours_DaysOfTheWeek");
        });

        modelBuilder.Entity<ClientLocationEntityScheduleRate>(entity =>
        {
            entity.HasKey(e => e.ClientLocationEntityScheduleRateKey).HasName("pk_ClientLocationEntityScheduleRates");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("trd_ClientLocationEntityScheduleRates");
                    tb.HasTrigger("trui_ClientLocationEntityScheduleRates");
                });

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.UseDefault).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationEntityScheduleKeyNavigation).WithMany(p => p.ClientLocationEntityScheduleRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityScheduleRates_ClientLocationEntityScheduleKey");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.ClientLocationEntityScheduleRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityScheduleRates_EntityHierarchyRateKey");
        });

        modelBuilder.Entity<ClientLocationEntityScheduleResource>(entity =>
        {
            entity.HasKey(e => e.ClientLocationEntityScheduleResourceKey).HasName("pk_ClientLocationEntityScheduleResources");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.UseResource).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationEntityScheduleKeyNavigation).WithMany(p => p.ClientLocationEntityScheduleResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityScheduleResources_ClientLocationEntityScheduleKey");

            entity.HasOne(d => d.ClientLocationResourceKeyNavigation).WithMany(p => p.ClientLocationEntityScheduleResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityScheduleResources_ClientLocationResourceKey");
        });

        modelBuilder.Entity<ClientLocationHeardAboutU>(entity =>
        {
            entity.HasKey(e => e.ClientLocationHeardAboutUsKey).HasFillFactor(80);

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationHeardAboutUs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationHeardAboutUs_ClientLocations");
        });

        modelBuilder.Entity<ClientLocationItemDirectory>(entity =>
        {
            entity.HasKey(e => e.ClientLocationItemDirectoryKey).HasName("pk_ClientLocationItemDirectories");

            entity.Property(e => e.IsItem).HasComputedColumnSql("(CONVERT([bit],case when [EntityHierarchyKey] IS NULL AND [ProductKey] IS NULL then (0) else (1) end,(0)))", false);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationItemDirectories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationItemDirectories_ClientLocationKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.ClientLocationItemDirectories).HasConstraintName("fk_ClientLocationItemDirectories_EntityHiearchyKey");

            entity.HasOne(d => d.ParentClientLocationItemDirectoryKeyNavigation).WithMany(p => p.InverseParentClientLocationItemDirectoryKeyNavigation).HasConstraintName("fk_ClientLocationItemDirectories_ParentClientLocationItemDirectoryKey");

            entity.HasOne(d => d.ProductKeyNavigation).WithMany(p => p.ClientLocationItemDirectories).HasConstraintName("fk_ClientLocationItemDirectories_ProductKey");
        });

        modelBuilder.Entity<ClientLocationLanguage>(entity =>
        {
            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationLanguages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationLanguages_ClientLocations");

            entity.HasOne(d => d.LanguageKeyNavigation).WithMany(p => p.ClientLocationLanguages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationLanguages_Languages");
        });

        modelBuilder.Entity<ClientLocationLogin>(entity =>
        {
            entity.HasKey(e => e.ClientLocationLoginKey).HasFillFactor(80);

            entity.HasIndex(e => new { e.ClientLocationKey, e.ClientLoginKey }, "ix1ClientLocationLogins")
                .IsUnique()
                .HasFillFactor(80);

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationLogins)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationLogins_ClientLocations");

            entity.HasOne(d => d.ClientLoginKeyNavigation).WithMany(p => p.ClientLocationLogins).HasConstraintName("FK_ClientLocationLogins_ClientLogins");
        });

        modelBuilder.Entity<ClientLocationLoginRole>(entity =>
        {
            entity.HasKey(e => e.ClientLocationLoginRoleKey).HasFillFactor(80);

            entity.HasIndex(e => new { e.ClientLocationLoginKey, e.ClientLocationRoleKey }, "ix1ClientLocationLoginRoles").HasFillFactor(80);

            entity.HasOne(d => d.ClientLocationLoginKeyNavigation).WithMany(p => p.ClientLocationLoginRoles).HasConstraintName("FK_ClientLocationLoginRoles_ClientLocationLogins");

            entity.HasOne(d => d.ClientLocationRoleKeyNavigation).WithMany(p => p.ClientLocationLoginRoles).HasConstraintName("FK_ClientLocationLoginRoles_ClientLocationRoles");
        });

        modelBuilder.Entity<ClientLocationOtherPaymentType>(entity =>
        {
            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationOtherPaymentTypes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationOtherPaymentTypes_ClientLocations");
        });

        modelBuilder.Entity<ClientLocationPaymentReason>(entity =>
        {
            entity.Property(e => e.ExcludeFromBalanceCalculations).HasDefaultValue(false);

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationPaymentReasons)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationPaymentReasons_ClientLocations");
        });

        modelBuilder.Entity<ClientLocationProcessingFee>(entity =>
        {
            entity.HasKey(e => e.ClientLocationProcessingFeeKey).HasName("pk_ClientLocationProcessingFees");

            entity.ToTable(tb => tb.HasTrigger("trui_ClientLocationProcessingFees"));

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithOne(p => p.ClientLocationProcessingFee)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationProcessingFees_ClientLocationKey");
        });

        modelBuilder.Entity<ClientLocationProcessingFeeHistory>(entity =>
        {
            entity.HasKey(e => e.ClientLocationProcessingFeeHistoryKey).HasName("pk_ClientLocationProcessingFeeHistory");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationProcessingFeeHistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationProcessingFeeHistory_ClientLocationKey");

            entity.HasOne(d => d.ClientLocationProcessingFeeKeyNavigation).WithMany(p => p.ClientLocationProcessingFeeHistories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationProcessingFeeHistory_ClientLocationProcessingFeeKey");
        });

        modelBuilder.Entity<ClientLocationProductDiscount>(entity =>
        {
            entity.HasKey(e => e.ClientLocationProductDiscountKey).HasName("pk_ClientLocationProductDiscounts");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("trd_ClientLocationProductDiscounts");
                    tb.HasTrigger("trui_ClientLocationProductDiscounts");
                });

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationDiscountKeyNavigation).WithMany(p => p.ClientLocationProductDiscounts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationProductDiscounts_ClientLocationDiscountKey");

            entity.HasOne(d => d.ProductKeyNavigation).WithMany(p => p.ClientLocationProductDiscounts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationProductDiscounts_ProductKey");
        });

        modelBuilder.Entity<ClientLocationRefundReason>(entity =>
        {
            entity.Property(e => e.ClientLocationRefundReasonKey).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IncludeInBalance).HasDefaultValue(true);
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationRefundReasons)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationRefundReasons_ClientLocations");
        });

        modelBuilder.Entity<ClientLocationResource>(entity =>
        {
            entity.HasKey(e => e.ClientLocationResourceKey).HasName("pk_ClientLocationResources");

            entity.Property(e => e.QuantityInService).HasComputedColumnSql("([Quantity]-[OutOfService])", true);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.SeatsInService).HasComputedColumnSql("(([Quantity]-[OutOfService])*[SeatCapacityPerResource])", true);
            entity.Property(e => e.UseResource).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationResources_ClientLocationKey");
        });

        modelBuilder.Entity<ClientLocationResourceItem>(entity =>
        {
            entity.HasKey(e => e.ClientLocationResourceItemKey).HasName("pk_ClientLocationResourceItems");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationResourceItems)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationResourceItems_ClientLocationKey");

            entity.HasOne(d => d.ClientLocationResourceKeyNavigation).WithMany(p => p.ClientLocationResourceItems)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationResourceItems_ClientLocationResourceKey");
        });

        modelBuilder.Entity<ClientLocationRole>(entity =>
        {
            entity.HasOne(d => d.ApplicationRoleKeyNavigation).WithMany(p => p.ClientLocationRoles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationRoles_System.ApplicationRoles");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationRoles).HasConstraintName("FK_ClientLocationRoles_ClientLocations");
        });

        modelBuilder.Entity<ClientLocationRoleApplicationObject>(entity =>
        {
            entity.HasKey(e => e.ClientLocationRoleApplicationObjectKey).HasFillFactor(80);

            entity.HasIndex(e => new { e.ClientLocationRoleKey, e.ApplicationObjectKey, e.ReadOnly }, "ix1ClientLocationRoleApplicationObjects").HasFillFactor(80);

            entity.HasOne(d => d.ApplicationObjectKeyNavigation).WithMany(p => p.ClientLocationRoleApplicationObjects)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationRoleApplicationObjects_ApplicationObjects");

            entity.HasOne(d => d.ClientLocationRoleKeyNavigation).WithMany(p => p.ClientLocationRoleApplicationObjects)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationRoleApplicationObjects_ClientLocationRoles1");
        });

        modelBuilder.Entity<ClientLocationRolesEntityHierarchy>(entity =>
        {
            entity.HasOne(d => d.ClientLocationRoleKeyNavigation).WithMany(p => p.ClientLocationRolesEntityHierarchies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationRolesClientLocationEntities_ClientLocationRoles");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.ClientLocationRolesEntityHierarchies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationRolesEntityHierarchy_EntityHierarchy");
        });

        modelBuilder.Entity<ClientLocationScheduleDayBookingAgent>(entity =>
        {
            entity.HasKey(e => e.ClientLocationScheduleDayBookingAgentKey).HasName("pk_ClientLocationScheduleDayBookingAgents");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.ClientLocationScheduleDayBookingAgents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleDayBookingAgents_BookingAgents");

            entity.HasOne(d => d.ClientLocationScheduleDaysEnum).WithMany(p => p.ClientLocationScheduleDayBookingAgents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleDayBookingAgents_ClientLocationScheduleDaysEnum");
        });

        modelBuilder.Entity<ClientLocationScheduleDayBookingAgentRate>(entity =>
        {
            entity.HasKey(e => new { e.ClientLocationEntityScheduleKey, e.BookingAgentKey, e.DaysOfTheWeekKey, e.EntityHierarchyRateKey }).HasName("pk_ClientLocationScheduleDayBookingAgentRates");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.DaysOfTheWeekKeyNavigation).WithMany(p => p.ClientLocationScheduleDayBookingAgentRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleDayBookingAgentRates_DaysOfTheWeekKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.ClientLocationScheduleDayBookingAgentRates).HasConstraintName("fk_ClientLocationScheduleDayBookingAgentRates_EntityHierarchyKey");

            entity.HasOne(d => d.ClientLocationEntityScheduleBookingAgentRate).WithMany(p => p.ClientLocationScheduleDayBookingAgentRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleDayBookingAgentRates_ClientLocationEntityScheduleBookingAgentRate");
        });

        modelBuilder.Entity<ClientLocationScheduleDaysEnum>(entity =>
        {
            entity.HasIndex(e => new { e.ClientLocationEntityKey, e.ScheduleTypeKey, e.ScheduleDate }, "ix_ClientLocationScheduleDaysEnum_01").HasFilter("([IsDeleted]=(0) AND [IsScheduleTemplate]=(0))");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationEntityKeyNavigation).WithMany(p => p.ClientLocationScheduleDaysEnums)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleDaysEnum_ClientLocationEntityKey");

            entity.HasOne(d => d.ClientLocationEntityScheduleKeyNavigation).WithMany(p => p.ClientLocationScheduleDaysEnums)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleDaysEnum_ClientLocationEntityScheduleKey");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationScheduleDaysEnums)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleDaysEnum_ClientLocationKey");

            entity.HasOne(d => d.ClientLocationScheduleLimitationKeyNavigation).WithMany(p => p.ClientLocationScheduleDaysEnums).HasConstraintName("fk_ClientLocationScheduleDaysEnum_ClientLocationScheduleLimitationKey");

            entity.HasOne(d => d.ClientLocationScheduleWhenKeyNavigation).WithMany(p => p.ClientLocationScheduleDaysEnums).HasConstraintName("fk_ClientLocationScheduleDaysEnum_ClientLocationScheduleWhenKey");

            entity.HasOne(d => d.ScheduleTypeKeyNavigation).WithMany(p => p.ClientLocationScheduleDaysEnums)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleDaysEnum_ScheduleTypeKey");
        });

        modelBuilder.Entity<ClientLocationScheduleLimitation>(entity =>
        {
            entity.HasKey(e => e.ClientLocationScheduleLimitationKey).HasName("pk_ClientLocationScheduleLimitations");

            entity.Property(e => e.ClientLocationScheduleLimitationKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<ClientLocationScheduleTime>(entity =>
        {
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.ClientLocationEntityScheduleKeyNavigation).WithMany(p => p.ClientLocationScheduleTimes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationScheduleTimes_ClientLocationEntitySchedules");
        });

        modelBuilder.Entity<ClientLocationScheduleTimeBookingAgent>(entity =>
        {
            entity.HasKey(e => new { e.ClientLocationEntityScheduleKey, e.ClientLocationScheduleTimeKey, e.BookingAgentKey }).HasName("pk_ClientLocationScheduleTimeBookingAgents");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationScheduleTimeKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeBookingAgents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeBookingAgents_ClientLocationScheduleTimes");

            entity.HasOne(d => d.ClientLocationEntityScheduleBookingAgent).WithMany(p => p.ClientLocationScheduleTimeBookingAgents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeBookingAgents_ClientLocationEntityScheduleBookingAgents");
        });

        modelBuilder.Entity<ClientLocationScheduleTimeDay>(entity =>
        {
            entity.HasKey(e => new { e.ClientLocationScheduleTimeKey, e.ClientLocationScheduleTimeDayKey })
                .HasName("PK_ClientLocationScheduleTimeDayKey")
                .IsClustered(false);

            entity.HasIndex(e => new { e.ClientLocationScheduleTimeKey, e.ClientLocationScheduleTimeDayKey }, "CI_ClientLocationScheduleTime").IsClustered();

            entity.Property(e => e.ClientLocationScheduleTimeDayKey).ValueGeneratedOnAdd();
            entity.Property(e => e.IsClosed).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationScheduleLimitationKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDays).HasConstraintName("fk_ClientLocationScheduleTimeDays_ClientLocationScheduleLimitationKey");

            entity.HasOne(d => d.ClientLocationScheduleWhenKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDays).HasConstraintName("fk_ClientLocationScheduleTimeDays_ClientLocationScheduleWhenKey");

            entity.HasOne(d => d.DaysOfTheWeekKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationScheduleTimeDays_DaysOfTheWeek");

            entity.HasOne(d => d.PickupRouteKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDays).HasConstraintName("FK_ClientLocationScheduleTimeDays_PickupRoutes");
        });

        modelBuilder.Entity<ClientLocationScheduleTimeDayBookingAgent>(entity =>
        {
            entity.HasKey(e => e.ClientLocationScheduleTimeDayBookingAgentKey).HasName("pk_ClientLocationScheduleTimeDayBookingAgents");

            entity.HasOne(d => d.DaysOfTheWeekKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayBookingAgents).HasConstraintName("fk_ClientLocationScheduleTimeDayBookingAgents_DaysOfTheWeekKey");

            entity.HasOne(d => d.ClientLocationScheduleTimeBookingAgent).WithMany(p => p.ClientLocationScheduleTimeDayBookingAgents)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayBookingAgents_ClientLocationScheduleTimeBookingAgents");
        });

        modelBuilder.Entity<ClientLocationScheduleTimeDayBookingAgentRate>(entity =>
        {
            entity.HasKey(e => e.ClientLocationScheduleTimeDayBookingAgentRateKey).HasName("pk_ClientLocationScheduleTimeDayBookingAgentRates");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayBookingAgentRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayBookingAgentRates_BookingAgents");

            entity.HasOne(d => d.ClientLocationScheduleTimeDayBookingAgentKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayBookingAgentRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayBookingAgentRates_ClientLocationScheduleTimeDayBookingAgents");

            entity.HasOne(d => d.ClientLocationScheduleTimeDayRateKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayBookingAgentRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayBookingAgentRates_ClientLocationScheduleTimeDayRate");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayBookingAgentRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayBookingAgentRates_EntityHierarchyRates");
        });

        modelBuilder.Entity<ClientLocationScheduleTimeDayBookingAgentRateEnum>(entity =>
        {
            entity.HasKey(e => new { e.EntityHierarchyKey, e.BookingAgentKey, e.ScheduleDate, e.ScheduleTime, e.EntityHierarchyRateKey }).HasName("pk_ClientLocationScheduleTimeDayBookingAgentRateEnum");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayBookingAgentRateEnums)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayBookingAgentRateEnum_BookingAgentKey");

            entity.HasOne(d => d.ClientLocationEntityKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayBookingAgentRateEnums)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayBookingAgentRateEnum_ClientLocationEntityKey");

            entity.HasOne(d => d.ClientLocationEntityScheduleKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayBookingAgentRateEnums)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayBookingAgentRateEnum_ClientLocationEntityScheduleKey");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayBookingAgentRateEnums)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayBookingAgentRateEnum_ClientLocationKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayBookingAgentRateEnums)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayBookingAgentRateEnum_EntityHierarchyKey");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayBookingAgentRateEnums)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayBookingAgentRateEnum_EntityHierarchyRateKey");
        });

        modelBuilder.Entity<ClientLocationScheduleTimeDayNote>(entity =>
        {
            entity.HasOne(d => d.ClientLoginKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayNotes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayNotes_ClientLoginKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayNotes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayNotes_EntityHierarchyKey");
        });

        modelBuilder.Entity<ClientLocationScheduleTimeDayOption>(entity =>
        {
            entity.Property(e => e.BookingAgentKey).HasDefaultValue(1L);
            entity.Property(e => e.DateAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.BookingAgentKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayOptions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationScheduleTimeDayOptions_BookingAgents");

            entity.HasOne(d => d.EntityHierarchyOptionKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayOptions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationScheduleTimeDayOptions_EntityHierarchyOptions");

            entity.HasOne(d => d.ClientLocationScheduleTimeDay).WithMany(p => p.ClientLocationScheduleTimeDayOptions).HasConstraintName("FK_ClientLocationScheduleTimeDayOptions_ClientLocationScheduleTimeDays");
        });

        modelBuilder.Entity<ClientLocationScheduleTimeDayOptionRate>(entity =>
        {
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationScheduleTimeDayOptionKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayOptionRates).HasConstraintName("FK_ClientLocationScheduleTimeDayOptionRates_ClientLocationScheduleTimeDayOptions");

            entity.HasOne(d => d.ClientLocationScheduleTimeDayRateKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayOptionRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationScheduleTimeDayOptionRates_ClientLocationScheduleTimeDayRates");
        });

        modelBuilder.Entity<ClientLocationScheduleTimeDayPickupRoute>(entity =>
        {
            entity.HasOne(d => d.ClientLocationScheduleTimeKeyNavigation).WithMany()
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayPickupRoutes_ClientLocationScheduleTimeKey");

            entity.HasOne(d => d.PickupRouteKeyNavigation).WithMany()
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayPickupRoutes_PickupRouteKey");

            entity.HasOne(d => d.ClientLocationScheduleTimeDay).WithMany().HasConstraintName("fk_ClientLocationScheduleTimeDayPickupRoutes_ClientLocationScheduleTimeDayKey");
        });

        modelBuilder.Entity<ClientLocationScheduleTimeDayRate>(entity =>
        {
            entity.HasKey(e => e.ClientLocationScheduleTimeDayRateKey).HasName("pk_ClientLocationScheduleTimeDayRates");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationScheduleTimeKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayRates).HasConstraintName("fk_ClientLocationScheduleTimeDayRates_ClientLocationScheduleTimeKey");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayRates).HasConstraintName("fk_ClientLocationScheduleTimeDayRates_EntityHierarchyRateKey");

            entity.HasOne(d => d.ClientLocationScheduleTimeDay).WithMany(p => p.ClientLocationScheduleTimeDayRates)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayRates_ClientLocationScheduleTimeDays");
        });

        modelBuilder.Entity<ClientLocationScheduleTimeDayRateResource>(entity =>
        {
            entity.HasKey(e => e.ScheduleTimeDayRateResourceKey).HasName("pk_ClientLocationScheduleTimeDayRateResources");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.SortOrder).HasDefaultValue((byte)255);
            entity.Property(e => e.UseResource).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationResourceKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayRateResources_ClientLocationResourceKey");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayRateResources_EntityHierarchyRateKey");

            entity.HasOne(d => d.ClientLocationScheduleTimeDay).WithMany(p => p.ClientLocationScheduleTimeDayRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayRateResources_ClientLocationScheduleTimeDayKey");
        });

        modelBuilder.Entity<ClientLocationScheduleTimeDayResource>(entity =>
        {
            entity.HasKey(e => e.ScheduleTimeDayResourceKey).HasName("pk_ClientLocationScheduleTimeDayResources");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationResourceKeyNavigation).WithMany(p => p.ClientLocationScheduleTimeDayResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayResources_ClientLocationResourceKey");

            entity.HasOne(d => d.ClientLocationScheduleTimeDay).WithMany(p => p.ClientLocationScheduleTimeDayResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationScheduleTimeDayResources_ClientLocationScheduleTimeDay");
        });

        modelBuilder.Entity<ClientLocationScheduleWhen>(entity =>
        {
            entity.HasKey(e => e.ClientLocationScheduleWhenKey).HasName("pk_ClientLocationScheduleWhens");

            entity.Property(e => e.ClientLocationScheduleWhenKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<ClientLocationTranslation>(entity =>
        {
            entity.HasIndex(e => new { e.ClientLocationKey, e.LanguageKey }, "ux_ClientLocationTranslations_CL_Lang")
                .IsUnique()
                .HasFilter("([DateDeleted] IS NULL)");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationTranslations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationTranslations_ClientLocationKey");

            entity.HasOne(d => d.LanguageKeyNavigation).WithMany(p => p.ClientLocationTranslations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationTranslations_LanguageKey");
        });

        modelBuilder.Entity<ClientLocationWeather>(entity =>
        {
            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientLocationWeathers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLocationWeather_ClientLocations");
        });

        modelBuilder.Entity<ClientLogin>(entity =>
        {
            entity.HasKey(e => e.ClientLoginKey).HasFillFactor(80);

            entity.HasIndex(e => new { e.ClientKey, e.Passcode }, "ix2ClientLogins")
                .IsUnique()
                .HasFillFactor(80);

            entity.HasIndex(e => new { e.ClientKey, e.UserName, e.Deleted }, "ix3ClientLogins")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.ClientKeyNavigation).WithMany(p => p.ClientLogins)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientLogins_Clients");
        });

        modelBuilder.Entity<ClientPaymentGateway>(entity =>
        {
            entity.HasKey(e => e.ClientPaymentGatewayKey).HasName("PK_ClientPaymentGateway");

            entity.HasOne(d => d.ClientKeyNavigation).WithMany(p => p.ClientPaymentGateways)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientPaymentGateway_Clients");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientPaymentGateways).HasConstraintName("FK_dbo.ClientPaymentGateways_dbo.ClientLocations");

            entity.HasOne(d => d.PaymentGatewayKeyNavigation).WithMany(p => p.ClientPaymentGateways)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientPaymentGateway_PaymentGateways");
        });

        modelBuilder.Entity<ClientRefundReason>(entity =>
        {
            entity.HasOne(d => d.ClientKeyNavigation).WithMany(p => p.ClientRefundReasons)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientRefundReasons_Clients");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ClientRefundReasons).HasConstraintName("FK_ClientRefundReasons_ClientLocations");
        });

        modelBuilder.Entity<CommissionType>(entity =>
        {
            entity.HasKey(e => e.CommissionTypeKey).HasName("pk_CommissionTypes");

            entity.Property(e => e.CommissionTypeKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<ConsentForm>(entity =>
        {
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ConsentForms)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ConsentForms_ClientLocationKey");
        });

        modelBuilder.Entity<ConsentFormHeading>(entity =>
        {
            entity.Property(e => e.ConsentFormHeadingKey).ValueGeneratedOnAdd();

            entity.HasOne(d => d.ConsentFormKeyNavigation).WithMany()
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsentFormHeadings_ConsentForms");

            entity.HasOne(d => d.LanguageKeyNavigation).WithMany()
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsentFormHeadings_Languages");
        });

        modelBuilder.Entity<ConsentFormQuestion>(entity =>
        {
            entity.HasKey(e => e.ConsentFormQuestionKey).HasFillFactor(80);

            entity.HasOne(d => d.ConsentFormKeyNavigation).WithMany(p => p.ConsentFormQuestions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsentFormQuestions_ConsentForms");

            entity.HasOne(d => d.ConsentQuestionKeyNavigation).WithMany(p => p.ConsentFormQuestions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsentFormQuestions_ConsentQuestions");
        });

        modelBuilder.Entity<ConsentQuestion>(entity =>
        {
            entity.HasKey(e => e.ConsentQuestionKey).HasName("PK_CW_ConsentQuestion");

            entity.ToTable(tb => tb.HasTrigger("tr_iou_ConsentQuestions"));

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<ConsentQuestionLanguage>(entity =>
        {
            entity.Property(e => e.ConsentQuestionLanguageKey).ValueGeneratedOnAdd();

            entity.HasOne(d => d.ConsentQuestionKeyNavigation).WithMany()
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsentQUestionLanguages_ConsentQuestions");

            entity.HasOne(d => d.LanguageKeyNavigation).WithMany()
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsentQUestionLanguages_Languages");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryKey).HasFillFactor(80);
        });

        modelBuilder.Entity<CrossSellEventType>(entity =>
        {
            entity.HasKey(e => e.CrossSellEventTypeKey).HasName("pk_CrossSellEventTypes");

            entity.Property(e => e.CrossSellEventTypeKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<DIN_ExperienceLevel>(entity =>
        {
            entity.HasKey(e => e.ExperienceLevelKey).HasName("pk_DINExperienceLevels");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("trd_DIN_ExperienceLevels");
                    tb.HasTrigger("trui_DIN_ExperienceLevels");
                });

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.DIN_ExperienceLevels)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_DINExperienceLevels_ClientLocationKey");
        });

        modelBuilder.Entity<DIN_Height>(entity =>
        {
            entity.HasKey(e => e.HeightKey).HasName("pk_DINHeights");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("trd_DIN_Heights");
                    tb.HasTrigger("trui_DIN_Heights");
                });

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.DIN_Heights)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_DINHeights_ClientLocationKey");
        });

        modelBuilder.Entity<DIN_ShoeSize>(entity =>
        {
            entity.HasKey(e => e.ShoeSizeKey).HasName("pk_DINShoeSizes");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("trd_DIN_ShoeSizes");
                    tb.HasTrigger("trui_DIN_ShoeSizes");
                });

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.DIN_ShoeSizes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_DINShoeSizes_ClientLocationKey");
        });

        modelBuilder.Entity<DIN_Weight>(entity =>
        {
            entity.HasKey(e => e.WeightKey).HasName("pk_DINWeights");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("trd_DIN_Weights");
                    tb.HasTrigger("trui_DIN_Weights");
                });

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.DIN_Weights)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_DINWeights_ClientLocationKey");
        });

        modelBuilder.Entity<Date>(entity =>
        {
            entity.HasKey(e => e.Date1).HasName("PK_dbo_Dates");
        });

        modelBuilder.Entity<DaylightSavingTimeWindow>(entity =>
        {
            entity.Property(e => e.WindowYear).HasComputedColumnSql("(datepart(year,[StartDate]))", false);

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.DaylightSavingTimeWindows)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DaylightSavingTimeWindows_ClientLocations");
        });

        modelBuilder.Entity<DaysOfTheWeek>(entity =>
        {
            entity.Property(e => e.DaysOfTheWeekKey).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<DeviceParing>(entity =>
        {
            entity.HasOne(d => d.DeviceKeyNavigation).WithMany(p => p.DeviceParingDeviceKeyNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Device_DeviceParings_ClientLocationDevices");

            entity.HasOne(d => d.TerminalKeyNavigation).WithMany(p => p.DeviceParingTerminalKeyNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Terminal_DeviceParings_ClientLocationDevices");
        });

        modelBuilder.Entity<DigitalWallet>(entity =>
        {
            entity.Property(e => e.DigitalWalletKey).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<DirectionType>(entity =>
        {
            entity.HasKey(e => e.DirectionTypeKey).HasName("pk_DirectionTypes");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<DiscountApplicationType>(entity =>
        {
            entity.Property(e => e.DiscountApplicationTypeKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<EmailTemplate>(entity =>
        {
            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.EmailTemplates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EmailTemplate_ClientLocationKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.EmailTemplates).HasConstraintName("fk_EmailTemplates_EntityHierarchyKey");

            entity.HasOne(d => d.NotificationDeliveryTypeKeyNavigation).WithMany(p => p.EmailTemplates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EmailTemplates_NotificationDeliveryTypeKey");

            entity.HasOne(d => d.NotificationTypeKeyNavigation).WithMany(p => p.EmailTemplates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EmailTemplates_NotificationTypeKey");
        });

        modelBuilder.Entity<EmailTemplateSection>(entity =>
        {
            entity.HasOne(d => d.EmailTemplateKeyNavigation).WithMany(p => p.EmailTemplateSections)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmailTemplateSections_EmailTemplates");
        });

        modelBuilder.Entity<EntityHierarchy>(entity =>
        {
            entity.HasKey(e => e.EntityHierarchyKey).HasFillFactor(80);

            entity.HasIndex(e => new { e.EntityHierarchyKey, e.ClientLocationKey, e.IsActive }, "ix1EntityHierarchy").HasFillFactor(80);

            entity.Property(e => e.ConsentRequired).HasDefaultValue(true);
            entity.Property(e => e.EnableTransportationTimeout).HasComment("Control if timeslots are hidden when outside the timeout window. True = hide, False = show.");
            entity.Property(e => e.TransportationCutoffHours).HasDefaultValue(0);

            entity.HasOne(d => d.AppointmentTypeKeyNavigation).WithMany(p => p.EntityHierarchies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchy_AppointmentTypes");

            entity.HasOne(d => d.CapacityTypeKeyNavigation).WithMany(p => p.EntityHierarchies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchy_CapacityTypeKey");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.EntityHierarchies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchy_ClientLocationKey");

            entity.HasOne(d => d.TicketTypeKeyNavigation).WithMany(p => p.EntityHierarchies).HasConstraintName("fk_EntityHierarchy_TicketTypeKey");
        });

        modelBuilder.Entity<EntityHierarchyChangeWindow>(entity =>
        {
            entity.HasKey(e => e.EntityHierarchyChangeWindowKey).HasName("PK_EntityHierarchyRescheduleWindows");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.EntityHierarchyChangeWindows)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EntityHierarchyRescheduleWindows_EntityHierarchy");
        });

        modelBuilder.Entity<EntityHierarchyEmployee>(entity =>
        {
            entity.HasKey(e => e.EntityHierarchyEmployeeKey).HasName("pk_EntityHierarchyEmployees");

            entity.HasIndex(e => e.OrderEntityTimeKey, "ix_EntityHierarchyEmployees_OET").HasFilter("([DateDeleted] IS NULL)");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientEmployeeKeyNavigation).WithMany(p => p.EntityHierarchyEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchyEmployees_ClientEmployeeKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.EntityHierarchyEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchyEmployees_EntityHierarchyKey");
        });

        modelBuilder.Entity<EntityHierarchyInventory>(entity =>
        {
            entity.Property(e => e.MaxHeight).HasComputedColumnSql("(isnull([MaxFeet],(20))*(1.0)+isnull([MaxInches],(0))/(12.0))", false);
            entity.Property(e => e.MinHeight).HasComputedColumnSql("(isnull([MinFeet],(0))*(1.0)+isnull([MinInches],(0))/(12.0))", false);

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.EntityHierarchyInventories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EntityHierarchyInventory_EntityHierarchy");
        });

        modelBuilder.Entity<EntityHierarchyOption>(entity =>
        {
            entity.HasIndex(e => new { e.EntityHierarchyKey, e.EntityHierarchyOptionKey }, "idx_EntityHierarchyOptions_Covering")
                .IsUnique()
                .HasFilter("([DateDeleted] IS NULL)");

            entity.Property(e => e.DateAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.EntityHierarchyOptions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EntityHierarchyOption_EntityHierarchy");
        });

        modelBuilder.Entity<EntityHierarchyOptionRate>(entity =>
        {
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.EntityHierarchyOptionKeyNavigation).WithMany(p => p.EntityHierarchyOptionRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EntityHierarchyOptionRates_EntityHierarchyOptions");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.EntityHierarchyOptionRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EntityHierarchyOptionRates_EntityHierarchyRates");
        });

        modelBuilder.Entity<EntityHierarchyRate>(entity =>
        {
            entity.HasKey(e => e.EntityHierarchyRateKey).HasName("pk_EntityHierarchyRates");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("trd_EntityHierarchyRates");
                    tb.HasTrigger("trui_EntityHierarchyRates");
                });

            entity.HasIndex(e => e.EntityHierarchyKey, "ixf_EntityHierarchyRates_EntityHierarchyKey_Duration").HasFilter("([Duration] IS NOT NULL)");

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.ResourcesSeatsPerRate).HasDefaultValue(1);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.EntityHierarchyRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchyRates_EntityHierarchyKey");

            entity.HasOne(d => d.RateClassKeyNavigation).WithMany(p => p.EntityHierarchyRates).HasConstraintName("FK_EntityHierarchyRates_RateClass");
        });

        modelBuilder.Entity<EntityHierarchyRateResource>(entity =>
        {
            entity.HasKey(e => e.EntityHierarchyRateResourceKey).HasName("pk_EntityHierarchyRateResources");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.SortIndex).HasDefaultValue((short)255);

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.EntityHierarchyRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchyRateResources_ClientLocationKey");

            entity.HasOne(d => d.ClientLocationResourceKeyNavigation).WithMany(p => p.EntityHierarchyRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchyRateResources_ClientLocationResourceKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.EntityHierarchyRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchyRateResources_EntityHierarchyKey");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.EntityHierarchyRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchyRateResources_EntityHierarchyRateKey");
        });

        modelBuilder.Entity<EntityHierarchyTranslation>(entity =>
        {
            entity.HasIndex(e => new { e.EntityHierarchyKey, e.LanguageKey }, "ux_EntityHierarchyTranslations_EH_Lang")
                .IsUnique()
                .HasFilter("([DateDeleted] IS NULL)");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.EntityHierarchyTranslations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchyTranslations_EntityHierarchyKey");

            entity.HasOne(d => d.LanguageKeyNavigation).WithMany(p => p.EntityHierarchyTranslations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchyTranslations_LanguageKey");
        });

        modelBuilder.Entity<ExplicitDay>(entity =>
        {
            entity.HasKey(e => e.ExplicitDayKey).HasFillFactor(80);

            entity.HasOne(d => d.ClientLocationEntityKeyNavigation).WithMany(p => p.ExplicitDays).HasConstraintName("FK_ExplicitDays_ClientLocationEntities");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.ExplicitDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExplicitDays_ClientLocations");

            entity.HasOne(d => d.HolidayRuleKeyNavigation).WithMany(p => p.ExplicitDays).HasConstraintName("FK_ExplicitDays_HolidayRules");
        });

        modelBuilder.Entity<Fee>(entity =>
        {
            entity.HasKey(e => e.FeeKey).HasName("pk_Fees");

            entity.Property(e => e.FeeClassKey).HasDefaultValue((short)1);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.Fees).HasConstraintName("FK_Fees_ClientLocationKey");

            entity.HasOne(d => d.FeeTypeKeyNavigation).WithMany(p => p.Fees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fees_FeeTypeKey");

            entity.HasOne(d => d.OnlineTravelAgencyKeyNavigation).WithMany(p => p.Fees).HasConstraintName("fk_Fees_OnlineTravelAgencyKey");

            entity.HasOne(d => d.PriorFeeKeyNavigation).WithMany(p => p.InversePriorFeeKeyNavigation).HasConstraintName("fk_Fees_PriorFeeKey");
        });

        modelBuilder.Entity<FeeAssociation>(entity =>
        {
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationEntityKeyNavigation).WithMany(p => p.FeeAssociations).HasConstraintName("fk_FeeAssociations_ClientLocationEntityKey");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.FeeAssociations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_FeeAssociations_ClientLocationKey");

            entity.HasOne(d => d.FeeKeyNavigation).WithMany(p => p.FeeAssociations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FeeAssociations_Fees");

            entity.HasOne(d => d.PhotoPackageKeyNavigation).WithMany(p => p.FeeAssociations).HasConstraintName("fk_FeeAssociations_PhotoPackageKey");

            entity.HasOne(d => d.ProductKeyNavigation).WithMany(p => p.FeeAssociations).HasConstraintName("fk_FeeAssociations_ProductKey");
        });

        modelBuilder.Entity<FeeClass>(entity =>
        {
            entity.HasKey(e => e.FeeClassKey).HasName("pk_FeeClasses");
        });

        modelBuilder.Entity<FeeType>(entity =>
        {
            entity.HasKey(e => e.FeeTypeKey).HasName("PK_TaxTypes");
        });

        modelBuilder.Entity<Gender>(entity =>
        {
            entity.Property(e => e.GenderKey).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<History_BookingAgentCardsOnFile>(entity =>
        {
            entity.HasKey(e => e.BookingAgentCardOnFileHistoryKey).HasName("pk_History_BookingAgentCardsOnFile");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.BookingAgentCardOnFileKeyNavigation).WithMany(p => p.History_BookingAgentCardsOnFiles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_History_BookingAgentCardOnFile_BookingAgentCardOnFileKey");
        });

        modelBuilder.Entity<History_BookingAgentEntityHierarchyRate>(entity =>
        {
            entity.HasKey(e => e.BookingAgentEntityHierarchyRateHistoryKey).HasName("pk_History_BookingAgentEntityHierarchyRates");

            entity.Property(e => e.CollectsTransportCost).HasDefaultValue(false);
            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCommissionOnTaxedAmount).HasDefaultValue(false);
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.BookingAgentEntityHierarchyRateKeyNavigation).WithMany(p => p.History_BookingAgentEntityHierarchyRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_History_BookingAgentEntityHierarchyRates_BookingAgentEntityHierarchyRateKey");
        });

        modelBuilder.Entity<History_BookingAgentInvoice>(entity =>
        {
            entity.HasKey(e => e.BookingAgentInvoiceHistoryKey).HasName("pk_HistoryBookingAgentInvoices");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);
        });

        modelBuilder.Entity<History_ClientLocationCustomField>(entity =>
        {
            entity.HasKey(e => e.ClientLocationCustomFieldHistoryKey).HasName("pk_ClientLocationCustomFieldsHistory");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationCustomFieldKeyNavigation).WithMany(p => p.History_ClientLocationCustomFields)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("pk_ClientLocationCustomFieldsHistory_ClientLocationCustomFieldKey");

            entity.HasOne(d => d.ClientLocationCustomFormKeyNavigation).WithMany(p => p.History_ClientLocationCustomFields)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationCustomFieldsHistory_ClientLocationCustomFormKey");

            entity.HasOne(d => d.ResponseTypeKeyNavigation).WithMany(p => p.History_ClientLocationCustomFields)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationCustomFieldsHistory_ResponseTypeKey");
        });

        modelBuilder.Entity<History_ClientLocationCustomFieldResponse>(entity =>
        {
            entity.HasKey(e => e.ClientLocationCustomFieldResponseHistoryKey).HasName("pk_ClientLocationCustomFieldResponsesHistory");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationCustomFieldKeyNavigation).WithMany(p => p.History_ClientLocationCustomFieldResponses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationCustomFieldResponsesHistory_ClientLocationCustomFieldKey");

            entity.HasOne(d => d.ClientLocationCustomFieldResponseKeyNavigation).WithMany(p => p.History_ClientLocationCustomFieldResponses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationCustomFieldResponsesHistory_ClientLocationCustomFieldResponseKey");
        });

        modelBuilder.Entity<History_ClientLocationEntityHierarchyDiscount>(entity =>
        {
            entity.HasKey(e => e.ClientLocationEntityHierarchyDiscountsHistoryKey).HasName("pk_ClientLocationEntityHierarchyDiscountsHistory");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationDiscountKeyNavigation).WithMany(p => p.History_ClientLocationEntityHierarchyDiscounts).HasConstraintName("fk_ClientLocationEntityHierarchyDiscountsHistory_ClientLocationDiscountKey");

            entity.HasOne(d => d.ClientLocationEntityHierarchyDiscountKeyNavigation).WithMany(p => p.History_ClientLocationEntityHierarchyDiscounts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityHierarchyDiscountsHistory_ClientLocationEntityHierarchyDiscountKey");

            entity.HasOne(d => d.DiscountTypeKeyNavigation).WithMany(p => p.History_ClientLocationEntityHierarchyDiscounts).HasConstraintName("fk_ClientLocationEntityHierarchyDiscountsHistory_DiscountTypeKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.History_ClientLocationEntityHierarchyDiscounts).HasConstraintName("fk_ClientLocationEntityHierarchyDiscountsHistory_EntityHierarchyKey");
        });

        modelBuilder.Entity<History_ClientLocationEntityHierarchyDiscountRate>(entity =>
        {
            entity.HasKey(e => e.ClientLocationEntityHierarchyDiscountRateHistoryKey).HasName("pk_ClientLocationEntityHierarchyDiscountRatesHistory");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationEntityHierarchyDiscountKeyNavigation).WithMany(p => p.History_ClientLocationEntityHierarchyDiscountRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityHierarchyDiscountRatesHistory_ClientLocationEntityHierarchyDiscountKey");

            entity.HasOne(d => d.ClientLocationEntityHierarchyDiscountRateKeyNavigation).WithMany(p => p.History_ClientLocationEntityHierarchyDiscountRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityHierarchyDiscountRatesHistory_ClientLocationEntityHierarchyDiscountRateKey");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.History_ClientLocationEntityHierarchyDiscountRateEntityHierarchyRateKeyNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityHierarchyDiscountRatesHistory_EntityHierarchyRateKey");

            entity.HasOne(d => d.RequiredEntityHierarchyRateKeyNavigation).WithMany(p => p.History_ClientLocationEntityHierarchyDiscountRateRequiredEntityHierarchyRateKeyNavigations).HasConstraintName("fk_ClientLocationEntityHierarchyDiscountRatesHistory_Required_EntityHierarchyRateKey");
        });

        modelBuilder.Entity<History_ClientLocationEntityScheduleRate>(entity =>
        {
            entity.HasKey(e => e.ClientLocationEntityScheduleRatesHistoryKey).HasName("pk_ClientLocationEntityScheduleRatesHistory");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationEntityScheduleKeyNavigation).WithMany(p => p.History_ClientLocationEntityScheduleRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityScheduleRatesHistory_ClientLocationEntityScheduleKey");

            entity.HasOne(d => d.ClientLocationEntityScheduleRateKeyNavigation).WithMany(p => p.History_ClientLocationEntityScheduleRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("pk_ClientLocationEntityScheduleRatesHistory_ClientLocationEntityScheduleRateKey");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.History_ClientLocationEntityScheduleRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationEntityScheduleRatesHistory_EntityHierarchyRateKey");
        });

        modelBuilder.Entity<History_ClientLocationProductDiscount>(entity =>
        {
            entity.HasKey(e => e.ClientLocationProductDiscountHistoryKey).HasName("pk_HistoryClientLocationProductDiscounts");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationProductDiscountKeyNavigation).WithMany(p => p.History_ClientLocationProductDiscounts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ClientLocationProductDiscountsHistory_ClientLocationProductDiscountKey");
        });

        modelBuilder.Entity<History_DIN_ExperienceLevel>(entity =>
        {
            entity.HasKey(e => e.ExperienceLevelHistoryKey).HasName("pk_DINExperienceLevelsHistory");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.History_DIN_ExperienceLevels)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_DINExperienceLevelsHistory_ClientLocationKey");

            entity.HasOne(d => d.ExperienceLevelKeyNavigation).WithMany(p => p.History_DIN_ExperienceLevels)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_DINExperienceLevelsHistory_ExperienceLevelKey");
        });

        modelBuilder.Entity<History_DIN_Height>(entity =>
        {
            entity.HasKey(e => e.HeightHistoryKey).HasName("pk_DINHeightsHistory");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.History_DIN_Heights)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_DINHeightsHistory_ClientLocationKey");

            entity.HasOne(d => d.HeightKeyNavigation).WithMany(p => p.History_DIN_Heights)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_DINHeightsHistory_HeightKey");
        });

        modelBuilder.Entity<History_DIN_ShoeSize>(entity =>
        {
            entity.HasKey(e => e.ShoeSizeHistoryKey).HasName("pk_DINShoeSizesHistory");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.History_DIN_ShoeSizes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_DINShoeSizesHistory_ClientLocationKey");

            entity.HasOne(d => d.ShoeSizeKeyNavigation).WithMany(p => p.History_DIN_ShoeSizes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_DINShoeSizesHistory_ShoeSizeKey");
        });

        modelBuilder.Entity<History_DIN_Weight>(entity =>
        {
            entity.HasKey(e => e.WeightHistoryKey).HasName("pk_DINWeightsHistory");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.History_DIN_Weights)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_DINWeightsHistory_ClientLocationKey");

            entity.HasOne(d => d.WeightKeyNavigation).WithMany(p => p.History_DIN_Weights)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_DINWeightsHistory_WeightKey");
        });

        modelBuilder.Entity<History_EntityHierarchyRate>(entity =>
        {
            entity.HasKey(e => e.EntityHierarchyRatesHistoryKey).HasName("pk_EntityHierarchyRatesHistory");

            entity.HasIndex(e => e.EntityHierarchyRateKey, "ix_HistoryEntityHierarchyRates_IsCurrent").HasFilter("([IsCurrent]=(1))");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.History_EntityHierarchyRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_EntityHierarchyRatesHistory_EntityHierarchyKey");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.History_EntityHierarchyRates).HasConstraintName("fk_EntityHierarchyRatesHistory_EntityHierarchyRateKey");
        });

        modelBuilder.Entity<History_Product>(entity =>
        {
            entity.HasKey(e => e.ProductHistoryKey).HasName("pk_HistoryProducts");

            entity.HasIndex(e => e.ProductKey, "ix_History_Products_IsCurrent").HasFilter("([IsCurrent]=(1))");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.ProductKeyNavigation).WithMany(p => p.History_Products)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ProductsHistory_ProductKey");
        });

        modelBuilder.Entity<History_ProductVariablePrice>(entity =>
        {
            entity.HasKey(e => e.ProductVariablePriceHistoryKey).HasName("pk_HistoryProductVariablePrices");

            entity.Property(e => e.DateFrom).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.IsCurrent).HasDefaultValue(true);

            entity.HasOne(d => d.ParentProductVariablePriceKeyNavigation).WithMany(p => p.History_ProductVariablePriceParentProductVariablePriceKeyNavigations).HasConstraintName("fk_ProductVariablePricesHistory_ParentProductVariablePriceKey");

            entity.HasOne(d => d.ProductKeyNavigation).WithMany(p => p.History_ProductVariablePrices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ProductVariablePricesHistory_ProductKey");

            entity.HasOne(d => d.ProductVariablePriceKeyNavigation).WithMany(p => p.History_ProductVariablePriceProductVariablePriceKeyNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ProductVariablePricesHistory_ProductVariablePriceKey");
        });

        modelBuilder.Entity<ImportSource>(entity =>
        {
            entity.HasKey(e => e.ImportSourceKey).HasName("pk_ImportSources");
        });

        modelBuilder.Entity<Merchandise_Inventory>(entity =>
        {
            entity.HasKey(e => new { e.ProductKey, e.DateTaken }).HasName("PK_Merchandise_Inventories");

            entity.ToTable("Inventories", "Merchandise", tb => tb.HasTrigger("tidu_Merchandise.Inventories"));

            entity.Property(e => e.DateTaken).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.ClientLoginKeyNavigation).WithMany(p => p.Merchandise_Inventories).HasConstraintName("FK_Merchandise.Inventories_dbo.ClientLogins");

            entity.HasOne(d => d.ProductKeyNavigation).WithOne(p => p.Merchandise_Inventory)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Merchandise_Inventories_Merchandise_Products");
        });

        modelBuilder.Entity<Merchandise_InventoryChangeLog>(entity =>
        {
            entity.HasKey(e => e.InventoryChangeLogKey).HasName("PK_Merchandise.InventoryChangeLog");

            entity.Property(e => e.ChangeInQuantity).HasComputedColumnSql("([QuantityAfterChange]-[QuantityBeforeChange])", false);
            entity.Property(e => e.DateChanged).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.ProductKeyNavigation).WithMany(p => p.Merchandise_InventoryChangeLogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InventoryChangeLog_Products");
        });

        modelBuilder.Entity<Merchandise_Product>(entity =>
        {
            entity.HasKey(e => e.ProductKey).HasName("pk_Merchandise_Products");

            entity.ToTable("Products", "Merchandise", tb =>
                {
                    tb.HasTrigger("trd_Merchandise_Products");
                    tb.HasTrigger("trui_Merchandise_Products");
                });

            entity.Property(e => e.ParentProductKey).HasComputedColumnSql("(case when [IsSimpleProduct]=(1) then NULL when [Products].[DateDeleted] IS NOT NULL then NULL when [ProductHierarchy].[GetLevel]()=(2) then NULL else replace(replace([ProductHierarchy].[GetAncestor]((1)).ToString(),('/'+CONVERT([varchar](12),[ClientLocationKey],(0)))+'/',''),'/','') end)", true);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.Taxable).HasDefaultValue(true);

            entity.HasOne(d => d.ClientKeyNavigation).WithMany(p => p.Merchandise_Products)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Merchandise.Products_dbo.Clients");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.Merchandise_Products).HasConstraintName("FK_Merchandise.Products_dbo.ClientLocations");

            entity.HasOne(d => d.ClientLoginKeyNavigation).WithMany(p => p.Merchandise_Products).HasConstraintName("FK_Merchandise.Products_dbo.ClientLogins");

            entity.HasOne(d => d.ProductCategoryKeyNavigation).WithMany(p => p.Merchandise_Products).HasConstraintName("FK_Merchandise.Products_Merchandise.ProductCategories");

            entity.HasOne(d => d.ProductColorKeyNavigation).WithMany(p => p.Merchandise_Products).HasConstraintName("FK_Merchandise.Products_Merchandise.ProductColors");

            entity.HasOne(d => d.ProductFlavorKeyNavigation).WithMany(p => p.Merchandise_Products).HasConstraintName("FK_Merchandise.Products_Merchandise.ProductFlavors");

            entity.HasOne(d => d.ProductSizeKeyNavigation).WithMany(p => p.Merchandise_Products).HasConstraintName("FK_Merchandise.Products_Merchandise.ProductSizes");
        });

        modelBuilder.Entity<Merchandise_ProductAddOnEntityHierarchy>(entity =>
        {
            entity.HasKey(e => e.ProductAddOnEntityHierarchyKey).HasName("pk_ProductAddOnEntityHierarchies");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.Merchandise_ProductAddOnEntityHierarchies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ProductAddOnEntityHierarchies_EntityHierarchy");

            entity.HasOne(d => d.ProductKeyNavigation).WithMany(p => p.Merchandise_ProductAddOnEntityHierarchies)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ProductAddOnEntityHierarchies_Products");
        });

        modelBuilder.Entity<Merchandise_ProductCategory>(entity =>
        {
            entity.HasKey(e => e.ProductCategoryKey).HasName("PK_Merchandise.ProductCategory");

            entity.HasOne(d => d.ClientKeyNavigation).WithMany(p => p.Merchandise_ProductCategories).HasConstraintName("FK_ProductCategories_Clients");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.Merchandise_ProductCategories).HasConstraintName("FK_ProductCategories_ClientLocations");
        });

        modelBuilder.Entity<Merchandise_ProductCategoryAssociation>(entity =>
        {
            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.Merchandise_ProductCategoryAssociations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductCategoryAssociations_ClientLocationKey");

            entity.HasOne(d => d.ProductCategoryKeyNavigation).WithMany(p => p.Merchandise_ProductCategoryAssociations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductCategoryAssociations_ProductCategories");

            entity.HasOne(d => d.ProductKeyNavigation).WithMany(p => p.Merchandise_ProductCategoryAssociations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductCategoryAssociations_Products");
        });

        modelBuilder.Entity<Merchandise_ProductColor>(entity =>
        {
            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.Merchandise_ProductColors)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Merchandise.ProductColors_ClientLocations");
        });

        modelBuilder.Entity<Merchandise_ProductRentalItem>(entity =>
        {
            entity.HasKey(e => e.ProductRentalItemKey).HasName("pk_ProductRentalItems");

            entity.HasIndex(e => new { e.ClientLocationKey, e.Sku }, "ix01_ProductRentalItems")
                .IsUnique()
                .HasFilter("([DateDeleted] IS NULL)");

            entity.HasIndex(e => e.ProductKey, "ix_Merchandise_ProductRentalItems_ProductKey").HasFilter("([DateDeleted] IS NULL)");

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.Merchandise_ProductRentalItems)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ProductRentalItems_ClientLocationKey");

            entity.HasOne(d => d.ProductKeyNavigation).WithMany(p => p.Merchandise_ProductRentalItems)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ProductRentalItems_ProductKey");
        });

        modelBuilder.Entity<Merchandise_ProductRentalItemNote>(entity =>
        {
            entity.HasKey(e => e.ProductRentalItemNoteKey).HasName("pk_ProductRentalItemNotes");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLoginKeyNavigation).WithMany(p => p.Merchandise_ProductRentalItemNotes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ProductRentalItemNotes_ClientLoginKey");

            entity.HasOne(d => d.ProductRentalItemKeyNavigation).WithMany(p => p.Merchandise_ProductRentalItemNotes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ProductRentalItemNotes_ProductRentalItemKey");

            entity.HasOne(d => d.RentalNoteTypeKeyNavigation).WithMany(p => p.Merchandise_ProductRentalItemNotes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ProductRentalItemNotes_RentalNoteTypeKey");
        });

        modelBuilder.Entity<Merchandise_ProductSize>(entity =>
        {
            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.Merchandise_ProductSizes).HasConstraintName("fk_Merchandise_ProductSizes");
        });

        modelBuilder.Entity<Merchandise_ProductVariablePrice>(entity =>
        {
            entity.HasKey(e => e.ProductVariablePriceKey).HasName("fk_ProductVariablePrices");

            entity.ToTable("ProductVariablePrices", "Merchandise", tb =>
                {
                    tb.HasTrigger("trd_Merchandise_ProductVariablePrices");
                    tb.HasTrigger("trui_Merchandise_ProductVariablePrices");
                });

            entity.HasIndex(e => new { e.ProductKey, e.ProductVariablePriceKey }, "ix_ProductVariablePrices01").HasFilter("([DateDeleted] IS NULL)");

            entity.Property(e => e.DurationTypeKey).HasDefaultValue((short)1);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ParentProductVariablePriceKeyNavigation).WithMany(p => p.InverseParentProductVariablePriceKeyNavigation).HasConstraintName("fk_MerchandiseProductVariablePrices_ParentProductVariablePriceKey");

            entity.HasOne(d => d.ProductKeyNavigation).WithMany(p => p.Merchandise_ProductVariablePrices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ProductVariablePrices_ProductKey");
        });

        modelBuilder.Entity<Merchandise_RentalNoteType>(entity =>
        {
            entity.HasKey(e => e.RentalNoteTypeKey).HasName("pk_RentalNoteTypes");
        });

        modelBuilder.Entity<MessageTemplate>(entity =>
        {
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.MessageTemplates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_MessageTemplates_ClientLocationKey");

            entity.HasOne(d => d.MessageTemplateTypeKeyNavigation).WithMany(p => p.MessageTemplates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_MessageTemplates_MessageTemplateTypeKey");
        });

        modelBuilder.Entity<MessageTemplateType>(entity =>
        {
            entity.HasKey(e => e.MessageTemplateTypeKey).HasName("pk_MessageTemplateTypes");
        });

        modelBuilder.Entity<NotificationSystem_NotificationDeliveryType>(entity =>
        {
            entity.Property(e => e.NotificationDeliveryTypeKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<OnlineTravelAgency>(entity =>
        {
            entity.Property(e => e.OnlineTravelAgencyGuid).HasDefaultValueSql("(newid())");
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<OrganizationType>(entity =>
        {
            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.OrganizationTypes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrganizationTypes_ClientLocations");
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.HasKey(e => e.PackageKey).HasFillFactor(80);

            entity.Property(e => e.PackageKey).ValueGeneratedNever();
            entity.Property(e => e.PackageTypeKey).HasDefaultValue((byte)1);

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.Packages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Packages_ClientLocations");

            entity.HasOne(d => d.PackageTypeKeyNavigation).WithMany(p => p.Packages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Packages_PackageTypeKey");
        });

        modelBuilder.Entity<PackageDetail>(entity =>
        {
            entity.HasKey(e => e.PackageDetailKey)
                .HasName("PK_Package Details")
                .HasFillFactor(80);

            entity.Property(e => e.PackageDetailKey).ValueGeneratedNever();

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.PackageDetails).HasConstraintName("FK_Package Details_EntityHierarchy");

            entity.HasOne(d => d.PackageKeyNavigation).WithMany(p => p.PackageDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Packages_PackageDetails");

            entity.HasOne(d => d.PhotoPackageKeyNavigation).WithMany(p => p.PackageDetails).HasConstraintName("FK_Package Details_PhotoPackages");

            entity.HasOne(d => d.ProductKeyNavigation).WithMany(p => p.PackageDetails).HasConstraintName("FK_Package_Details_Products");
        });

        modelBuilder.Entity<PackageDetailGroup>(entity =>
        {
            entity.Property(e => e.PackageDetailGroupKey).ValueGeneratedNever();
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.PackageDetailKeyNavigation).WithMany(p => p.PackageDetailGroups)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PackageDetailGroups_PackageDetailKey");

            entity.HasOne(d => d.PackageGroupKeyNavigation).WithMany(p => p.PackageDetailGroups)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PackageDetailGroups_PackageGroupKey");

            entity.HasOne(d => d.PackageKeyNavigation).WithMany(p => p.PackageDetailGroups)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PackageDetailGroups_PackageKey");
        });

        modelBuilder.Entity<PackageDetailRate>(entity =>
        {
            entity.HasKey(e => e.PackageDetailRateKey).HasName("pk_PackageDetailRates");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.PackageDetailRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PackageDetailRates_EntityHierarchyRateKey");

            entity.HasOne(d => d.PackageDetailKeyNavigation).WithMany(p => p.PackageDetailRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PackageDetailRates_PackageDetailKey");
        });

        modelBuilder.Entity<PackageGroup>(entity =>
        {
            entity.Property(e => e.PackageGroupKey).ValueGeneratedNever();
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.PackageKeyNavigation).WithMany(p => p.PackageGroups)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PackageGroups_PackageKey");
        });

        modelBuilder.Entity<PackageType>(entity =>
        {
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<PaymentMethodType>(entity =>
        {
            entity.Property(e => e.PaymentMethodTypeKey).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<PaymentProcessor>(entity =>
        {
            entity.HasKey(e => e.PaymentProcessorKey).HasName("pk_PaymentProcessors");
        });

        modelBuilder.Entity<PaymentType>(entity =>
        {
            entity.Property(e => e.PaymentTypeKey).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<PhotoPackage>(entity =>
        {
            entity.HasKey(e => e.PhotoPackageKey).HasFillFactor(80);

            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.ClientLocationEntityKeyNavigation).WithMany(p => p.PhotoPackages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PhotoPackages_ClientLocationEntities");

            entity.HasOne(d => d.PhotoPackageTypeKeyNavigation).WithMany(p => p.PhotoPackages).HasConstraintName("FK_PhotoPackages_PhotoPackageTypes");
        });

        modelBuilder.Entity<PhotoSystemType>(entity =>
        {
            entity.Property(e => e.PhotoSystemTypeKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<PickupLocation>(entity =>
        {
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.PickupLocations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PickupLocations_ClientLocations");
        });

        modelBuilder.Entity<PickupOrderEventType>(entity =>
        {
            entity.HasKey(e => e.PickupOrderEventTypeKey).HasName("pk_PickupOrderEventTypes");
        });

        modelBuilder.Entity<PickupRoute>(entity =>
        {
            entity.Property(e => e.DirectionTypeKey).HasDefaultValue((byte)1);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.PickupRoutes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PickupRoutes_ClientLocations");
        });

        modelBuilder.Entity<PickupRouteDay>(entity =>
        {
            entity.HasKey(e => e.PickupRouteDayKey).HasName("pk_PickupRouteDays");

            entity.HasOne(d => d.PickupRouteKeyNavigation).WithMany(p => p.PickupRouteDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PickupRouteDays_PickupRouteKey");
        });

        modelBuilder.Entity<PickupRouteEmployee>(entity =>
        {
            entity.HasKey(e => e.PickupRouteEmployeeKey).HasName("pk_PickupRouteEmployees");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.PickupRouteEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PickupRouteEmployees_ClientLocationKey");

            entity.HasOne(d => d.ClientLoginKeyNavigation).WithMany(p => p.PickupRouteEmployees).HasConstraintName("fk_PickupRouteEmployees_ClientLoginKey");

            entity.HasOne(d => d.PickupRouteKeyNavigation).WithMany(p => p.PickupRouteEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PickupRouteEmployees_PickupRouteKey");

            entity.HasOne(d => d.PickupVehicleKeyNavigation).WithMany(p => p.PickupRouteEmployees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PickupRouteEmployees_PickupVehicleKey");
        });

        modelBuilder.Entity<PickupRouteSchedule>(entity =>
        {
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.PickupRouteKeyNavigation).WithMany(p => p.PickupRouteSchedules)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PickupRouteSchedules_PickupRoutes");
        });

        modelBuilder.Entity<PickupRouteScheduleTime>(entity =>
        {
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.PickupRouteScheduleKeyNavigation).WithMany(p => p.PickupRouteScheduleTimes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PickupRouteScheduleTimes_PickupRouteSchedules");
        });

        modelBuilder.Entity<PickupRouteScheduleTimeDay>(entity =>
        {
            entity.HasOne(d => d.DaysOfTheWeekKeyNavigation).WithMany(p => p.PickupRouteScheduleTimeDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PickupRouteScheduleTimeDays_DaysOfTheWeek");

            entity.HasOne(d => d.PickupRouteScheduleTimeKeyNavigation).WithMany(p => p.PickupRouteScheduleTimeDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PickupRouteScheduleTimeDays_PickupRouteScheduleTimes");
        });

        modelBuilder.Entity<PickupRouteStop>(entity =>
        {
            entity.HasKey(e => e.PickupRouteStopKey).IsClustered(false);

            entity.HasIndex(e => e.PickupRouteKey, "ix1PickupRouteStops").IsClustered();

            entity.HasIndex(e => new { e.PickupLocationKey, e.PickupRouteKey, e.PickupDate }, "ux_PickupRouteStops_PL_PR_PickupDate")
                .IsUnique()
                .HasFilter("([DateDeleted] IS NULL)");

            entity.Property(e => e.PickupDate).HasComment("If this column is populated, marked as deleted or otherwise, then all route stops for the day must be explicitly populated");
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.PickupLocationKeyNavigation).WithMany(p => p.PickupRouteStops)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PickupRouteStops_PickupLocations");

            entity.HasOne(d => d.PickupRouteKeyNavigation).WithMany(p => p.PickupRouteStops)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PickupRouteStops_PickupRoutes");
        });

        modelBuilder.Entity<PickupRouteStopDay>(entity =>
        {
            entity.HasKey(e => e.PickupRouteStopDayKey).HasName("pk_PickupRouteStopDays");

            entity.HasOne(d => d.PickupLocationKeyNavigation).WithMany(p => p.PickupRouteStopDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PickupRouteStopDay_PickupLocationKey");

            entity.HasOne(d => d.PickupRouteKeyNavigation).WithMany(p => p.PickupRouteStopDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PickupRouteStopDays_PickupRouteKey");
        });

        modelBuilder.Entity<PickupRouteVehicle>(entity =>
        {
            entity.HasOne(d => d.PickupRouteKeyNavigation).WithMany(p => p.PickupRouteVehicles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PickupRouteVehicles_PickupRouteKey");

            entity.HasOne(d => d.PickupVehicleKeyNavigation).WithMany(p => p.PickupRouteVehicles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_PickupRouteVehicles_PickupVehicleKey");
        });

        modelBuilder.Entity<PickupVehicle>(entity =>
        {
            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.PickupVehicles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PickupVehicles_ClientLocations");
        });

        modelBuilder.Entity<ProcessingType>(entity =>
        {
            entity.Property(e => e.ProcessingTypeKey).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<RateClass>(entity =>
        {
            entity.HasKey(e => e.RateClassKey).HasName("pk_RateClasses");

            entity.Property(e => e.RateClassKey).ValueGeneratedNever();
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<Register>(entity =>
        {
            entity.HasKey(e => e.RegisterKey)
                .IsClustered(false)
                .HasFillFactor(80);

            entity.Property(e => e.RegisterKey).ValueGeneratedNever();

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.Registers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Registers_ClientLocations");
        });

        modelBuilder.Entity<ResponseType>(entity =>
        {
            entity.HasKey(e => e.ResponseTypeKey).HasName("pk_ResponseTypes");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.SortOrder).HasDefaultValue((short)1);
        });

        modelBuilder.Entity<ScheduleType>(entity =>
        {
            entity.Property(e => e.ScheduleTypeKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<ServiceLog>(entity =>
        {
            entity.HasOne(d => d.ServiceKeyNavigation).WithMany(p => p.ServiceLogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceLogs_Services");
        });

        modelBuilder.Entity<Session>(entity =>
        {
            entity.HasKey(e => e.SessionId)
                .HasName("PK__Sessions__C9F49290A1D176FE")
                .HasFillFactor(80);

            entity.HasIndex(e => e.Expires, "IX_Sessions_Expires").HasFillFactor(80);
        });

        modelBuilder.Entity<Square_CurrencyCode>(entity =>
        {
            entity.HasKey(e => e.CurrencyKey).HasName("PK__Currency__DC9C5DF0C30EAC6A");
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.HasOne(d => d.CountryKeyNavigation).WithMany(p => p.States)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Countries_States");
        });

        modelBuilder.Entity<SystemConfiguration>(entity =>
        {
            entity.HasIndex(e => e.ConfigurationParameter, "IX_SystemConfiguration").IsClustered();
        });

        modelBuilder.Entity<System_AppVersion>(entity =>
        {
            entity.HasKey(e => new { e.BundleId, e.LatestVersion }).HasName("pk_SystemAppVersions");

            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<System_ApplicationRole>(entity =>
        {
            entity.Property(e => e.ApplicationRoleKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<System_ApplicationRolesApplicationObject>(entity =>
        {
            entity.HasKey(e => e.ApplicationRolesApplicationObjectsKey).HasFillFactor(80);

            entity.HasOne(d => d.ApplicationObjectKeyNavigation).WithMany(p => p.System_ApplicationRolesApplicationObjects)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ApplicationRolesApplicationObjects_ApplicationObjects");

            entity.HasOne(d => d.ApplicationRoleKeyNavigation).WithMany(p => p.System_ApplicationRolesApplicationObjects)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ApplicationRolesApplicationObjects_ApplicationRoles");
        });

        modelBuilder.Entity<System_Color>(entity =>
        {
            entity.HasKey(e => e.ColorKey).HasName("PK_System.Colors");
        });

        modelBuilder.Entity<System_EmailType>(entity =>
        {
            entity.Property(e => e.EmailTypeKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<System_MessageType>(entity =>
        {
            entity.Property(e => e.MessageTypeKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<System_ProcessingStatus>(entity =>
        {
            entity.Property(e => e.ProcessingStatusKey).ValueGeneratedNever();
        });

        modelBuilder.Entity<System_TimeZone>(entity =>
        {
            entity.HasKey(e => e.TimeZoneKey).HasFillFactor(80);
        });

        modelBuilder.Entity<System_spt_value>(entity =>
        {
            entity.Property(e => e.Type).IsFixedLength();
        });

        modelBuilder.Entity<Ticketing_TicketType>(entity =>
        {
            entity.HasKey(e => e.TicketTypeKey).HasName("pk_TicketTypes");
        });

        modelBuilder.Entity<avail_ScheduleDay>(entity =>
        {
            entity.HasOne(d => d.ClientLocationEntityKeyNavigation).WithMany(p => p.avail_ScheduleDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleDays_ClientLocationEntityKey");

            entity.HasOne(d => d.ClientLocationEntityScheduleKeyNavigation).WithMany(p => p.avail_ScheduleDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleDays_ClientLocationEntityScheduleKey");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.avail_ScheduleDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleDays_ClientLocationKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.avail_ScheduleDays)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleDays_EntityHierarchyKey");
        });

        modelBuilder.Entity<avail_ScheduleRate>(entity =>
        {
            entity.HasKey(e => new { e.EntityHierarchyKey, e.EntityHierarchyRateKey, e.ScheduleDate, e.Time }).HasName("pk_avail_ScheduleRates");
        });

        modelBuilder.Entity<avail_ScheduleRateResource>(entity =>
        {
            entity.HasKey(e => new { e.EntityHierarchyKey, e.EntityHierarchyRateKey, e.ScheduleDate, e.Time, e.ClientLocationResourceKey }).HasName("pk_avail_ScheduleTimeRateResources");

            entity.Property(e => e.SortOrder).HasDefaultValue((byte)255);

            entity.HasOne(d => d.ClientKeyNavigation).WithMany(p => p.avail_ScheduleRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleTimeRateResources_ClientKey");

            entity.HasOne(d => d.ClientLocationEntityKeyNavigation).WithMany(p => p.avail_ScheduleRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleTimeRateResources_ClientLocationEntityKey");

            entity.HasOne(d => d.ClientLocationEntityScheduleKeyNavigation).WithMany(p => p.avail_ScheduleRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleTimeRateResources_ClientLocationEntityScheduleKey");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.avail_ScheduleRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleTimeRateResources_ClientLocationKey");

            entity.HasOne(d => d.ClientLocationResourceKeyNavigation).WithMany(p => p.avail_ScheduleRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleTimeRateResources_ClientLocationResourceKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.avail_ScheduleRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleTimeRateResources_EntityHierarchyKey");

            entity.HasOne(d => d.EntityHierarchyRateKeyNavigation).WithMany(p => p.avail_ScheduleRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleRateResources_EntityHierarchyRateKey");

            entity.HasOne(d => d.EntityHierarchyRateResourceKeyNavigation).WithMany(p => p.avail_ScheduleRateResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleRateResources_EntityHierarchyRateResourceKey");
        });

        modelBuilder.Entity<avail_ScheduleTime>(entity =>
        {
            entity.HasKey(e => new { e.EntityHierarchyKey, e.ScheduleDate, e.Time }).HasName("pk_ScheduleTimes");

            entity.Property(e => e.Ampm).HasComputedColumnSql("(case when [Time]<'12:00:00.000' then 'AM' else 'PM' end)", false);

            entity.HasOne(d => d.ClientLocationScheduleLimitationKeyNavigation).WithMany(p => p.avail_ScheduleTimes).HasConstraintName("fk_avail_ScheduleTimes_ClientLocationScheduleLimitationKey");

            entity.HasOne(d => d.ClientLocationScheduleWhenKeyNavigation).WithMany(p => p.avail_ScheduleTimes).HasConstraintName("fk_avail_ScheduleTimes_ClientLocationScheduleWhenKey");

            entity.HasOne(d => d.PickupRouteKeyNavigation).WithMany(p => p.avail_ScheduleTimes).HasConstraintName("fk_avail_ScheduleTimes_PickupRouteKey");
        });

        modelBuilder.Entity<avail_ScheduleTimeResource>(entity =>
        {
            entity.HasKey(e => new { e.EntityHierarchyKey, e.ScheduleDate, e.Time, e.ClientLocationResourceKey }).HasName("pk_avail_ScheduleTimeResources");

            entity.HasOne(d => d.ClientKeyNavigation).WithMany(p => p.avail_ScheduleTimeResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleTimeResources_ClientKey");

            entity.HasOne(d => d.ClientLocationEntityKeyNavigation).WithMany(p => p.avail_ScheduleTimeResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleTimeResources_ClientLocationEntityKey");

            entity.HasOne(d => d.ClientLocationEntityScheduleKeyNavigation).WithMany(p => p.avail_ScheduleTimeResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleTimeResources_ClientLocationEntityScheduleKey");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.avail_ScheduleTimeResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleTimeResources_ClientLocationKey");

            entity.HasOne(d => d.ClientLocationResourceKeyNavigation).WithMany(p => p.avail_ScheduleTimeResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleTimeResources_ClientLocationResourceKey");

            entity.HasOne(d => d.EntityHierarchyKeyNavigation).WithMany(p => p.avail_ScheduleTimeResources)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_avail_ScheduleTimeResources_EntityHierarchyKey");
        });

        modelBuilder.Entity<remediate_MessageQueueFixerConfiguration>(entity =>
        {
            entity.HasKey(e => e.ConfigurationKey).HasName("pk_remediate_MessageQueueFixerConfiguration");

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.RowAdded).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<remediate_ProcessOrderResultType>(entity =>
        {
            entity.HasKey(e => e.ResultTypeKey).HasName("pk_remediate_ProcessOrderResultTypes");
        });

        modelBuilder.Entity<remediate_ProcessedOrder>(entity =>
        {
            entity.HasKey(e => e.ProcessedOrderKey).HasName("pk_remediate_ProcessedOrders");

            entity.Property(e => e.DateProcessed).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.ClientLocationKeyNavigation).WithMany(p => p.remediate_ProcessedOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_remediate_ProcessedOrders_ClientLocationKey");

            entity.HasOne(d => d.ResultTypeKeyNavigation).WithMany(p => p.remediate_ProcessedOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_remediate_ProcessedOrders_ResultTypeKey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}